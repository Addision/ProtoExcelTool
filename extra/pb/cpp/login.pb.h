// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_2eproto;
class CreateRoleAck;
struct CreateRoleAckDefaultTypeInternal;
extern CreateRoleAckDefaultTypeInternal _CreateRoleAck_default_instance_;
class CreateRoleReq;
struct CreateRoleReqDefaultTypeInternal;
extern CreateRoleReqDefaultTypeInternal _CreateRoleReq_default_instance_;
class EnterSceneNotify;
struct EnterSceneNotifyDefaultTypeInternal;
extern EnterSceneNotifyDefaultTypeInternal _EnterSceneNotify_default_instance_;
class LeaveSceneNotify;
struct LeaveSceneNotifyDefaultTypeInternal;
extern LeaveSceneNotifyDefaultTypeInternal _LeaveSceneNotify_default_instance_;
class LoginMsgReq;
struct LoginMsgReqDefaultTypeInternal;
extern LoginMsgReqDefaultTypeInternal _LoginMsgReq_default_instance_;
class ObjMoveNotify;
struct ObjMoveNotifyDefaultTypeInternal;
extern ObjMoveNotifyDefaultTypeInternal _ObjMoveNotify_default_instance_;
class ObjMoveReq;
struct ObjMoveReqDefaultTypeInternal;
extern ObjMoveReqDefaultTypeInternal _ObjMoveReq_default_instance_;
class RoleItem;
struct RoleItemDefaultTypeInternal;
extern RoleItemDefaultTypeInternal _RoleItem_default_instance_;
class RoleListNotify;
struct RoleListNotifyDefaultTypeInternal;
extern RoleListNotifyDefaultTypeInternal _RoleListNotify_default_instance_;
class RoleLoginAck;
struct RoleLoginAckDefaultTypeInternal;
extern RoleLoginAckDefaultTypeInternal _RoleLoginAck_default_instance_;
class RoleLoginReq;
struct RoleLoginReqDefaultTypeInternal;
extern RoleLoginReqDefaultTypeInternal _RoleLoginReq_default_instance_;
class UserEnterSceneAck;
struct UserEnterSceneAckDefaultTypeInternal;
extern UserEnterSceneAckDefaultTypeInternal _UserEnterSceneAck_default_instance_;
class UserEnterSceneReq;
struct UserEnterSceneReqDefaultTypeInternal;
extern UserEnterSceneReqDefaultTypeInternal _UserEnterSceneReq_default_instance_;
class VisibleObjEnterRoleNotify;
struct VisibleObjEnterRoleNotifyDefaultTypeInternal;
extern VisibleObjEnterRoleNotifyDefaultTypeInternal _VisibleObjEnterRoleNotify_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CreateRoleAck* Arena::CreateMaybeMessage<::CreateRoleAck>(Arena*);
template<> ::CreateRoleReq* Arena::CreateMaybeMessage<::CreateRoleReq>(Arena*);
template<> ::EnterSceneNotify* Arena::CreateMaybeMessage<::EnterSceneNotify>(Arena*);
template<> ::LeaveSceneNotify* Arena::CreateMaybeMessage<::LeaveSceneNotify>(Arena*);
template<> ::LoginMsgReq* Arena::CreateMaybeMessage<::LoginMsgReq>(Arena*);
template<> ::ObjMoveNotify* Arena::CreateMaybeMessage<::ObjMoveNotify>(Arena*);
template<> ::ObjMoveReq* Arena::CreateMaybeMessage<::ObjMoveReq>(Arena*);
template<> ::RoleItem* Arena::CreateMaybeMessage<::RoleItem>(Arena*);
template<> ::RoleListNotify* Arena::CreateMaybeMessage<::RoleListNotify>(Arena*);
template<> ::RoleLoginAck* Arena::CreateMaybeMessage<::RoleLoginAck>(Arena*);
template<> ::RoleLoginReq* Arena::CreateMaybeMessage<::RoleLoginReq>(Arena*);
template<> ::UserEnterSceneAck* Arena::CreateMaybeMessage<::UserEnterSceneAck>(Arena*);
template<> ::UserEnterSceneReq* Arena::CreateMaybeMessage<::UserEnterSceneReq>(Arena*);
template<> ::VisibleObjEnterRoleNotify* Arena::CreateMaybeMessage<::VisibleObjEnterRoleNotify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CreateRoleAck_RET_TYPE : int {
  CreateRoleAck_RET_TYPE_RESULT_TYPE_SUCC = 0,
  CreateRoleAck_RET_TYPE_RESULT_TYPE_NO_SPACE = 1,
  CreateRoleAck_RET_TYPE_RESULT_TYPE_EXIST_NAME = 2,
  CreateRoleAck_RET_TYPE_RESULT_TYPE_NAME_INVALID = 3,
  CreateRoleAck_RET_TYPE_RESULT_TYPE_SERVER_LIMIT = 4,
  CreateRoleAck_RET_TYPE_CreateRoleAck_RET_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CreateRoleAck_RET_TYPE_CreateRoleAck_RET_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CreateRoleAck_RET_TYPE_IsValid(int value);
constexpr CreateRoleAck_RET_TYPE CreateRoleAck_RET_TYPE_RET_TYPE_MIN = CreateRoleAck_RET_TYPE_RESULT_TYPE_SUCC;
constexpr CreateRoleAck_RET_TYPE CreateRoleAck_RET_TYPE_RET_TYPE_MAX = CreateRoleAck_RET_TYPE_RESULT_TYPE_SERVER_LIMIT;
constexpr int CreateRoleAck_RET_TYPE_RET_TYPE_ARRAYSIZE = CreateRoleAck_RET_TYPE_RET_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateRoleAck_RET_TYPE_descriptor();
template<typename T>
inline const std::string& CreateRoleAck_RET_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateRoleAck_RET_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateRoleAck_RET_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateRoleAck_RET_TYPE_descriptor(), enum_t_value);
}
inline bool CreateRoleAck_RET_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateRoleAck_RET_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateRoleAck_RET_TYPE>(
    CreateRoleAck_RET_TYPE_descriptor(), name, value);
}
enum RoleListNotify_LoginAckCode : int {
  RoleListNotify_LoginAckCode_LOGIN_RESULT_SUC = 0,
  RoleListNotify_LoginAckCode_LOGIN_NO_THREAD = 1100,
  RoleListNotify_LoginAckCode_LOGIN_SERVER_ERROR = 1102,
  RoleListNotify_LoginAckCode_LOGIN_RESULT_EXIST = 1103,
  RoleListNotify_LoginAckCode_LOGIN_SCENE_NOT_EXIST = 1104,
  RoleListNotify_LoginAckCode_LOGIN_RESULT_NO_GATEWAY = 1105,
  RoleListNotify_LoginAckCode_LOGIN_RESULT_NO_ROLE = 1106,
  RoleListNotify_LoginAckCode_LOGIN_THREAD_BUSY = 1107,
  RoleListNotify_LoginAckCode_LOGIN_LOGIN_FORBID = 1108,
  RoleListNotify_LoginAckCode_LOGIN_ANTI_WALLOW = 1109,
  RoleListNotify_LoginAckCode_RoleListNotify_LoginAckCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RoleListNotify_LoginAckCode_RoleListNotify_LoginAckCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RoleListNotify_LoginAckCode_IsValid(int value);
constexpr RoleListNotify_LoginAckCode RoleListNotify_LoginAckCode_LoginAckCode_MIN = RoleListNotify_LoginAckCode_LOGIN_RESULT_SUC;
constexpr RoleListNotify_LoginAckCode RoleListNotify_LoginAckCode_LoginAckCode_MAX = RoleListNotify_LoginAckCode_LOGIN_ANTI_WALLOW;
constexpr int RoleListNotify_LoginAckCode_LoginAckCode_ARRAYSIZE = RoleListNotify_LoginAckCode_LoginAckCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoleListNotify_LoginAckCode_descriptor();
template<typename T>
inline const std::string& RoleListNotify_LoginAckCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoleListNotify_LoginAckCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoleListNotify_LoginAckCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoleListNotify_LoginAckCode_descriptor(), enum_t_value);
}
inline bool RoleListNotify_LoginAckCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoleListNotify_LoginAckCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoleListNotify_LoginAckCode>(
    RoleListNotify_LoginAckCode_descriptor(), name, value);
}
// ===================================================================

class RoleLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoleLoginReq) */ {
 public:
  inline RoleLoginReq() : RoleLoginReq(nullptr) {}
  ~RoleLoginReq() override;
  explicit constexpr RoleLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleLoginReq(const RoleLoginReq& from);
  RoleLoginReq(RoleLoginReq&& from) noexcept
    : RoleLoginReq() {
    *this = ::std::move(from);
  }

  inline RoleLoginReq& operator=(const RoleLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleLoginReq& operator=(RoleLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleLoginReq* internal_default_instance() {
    return reinterpret_cast<const RoleLoginReq*>(
               &_RoleLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoleLoginReq& a, RoleLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleLoginReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleLoginReq* New() const final {
    return new RoleLoginReq();
  }

  RoleLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleLoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoleLoginReq";
  }
  protected:
  explicit RoleLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccoutFieldNumber = 1,
    kRoleNameFieldNumber = 3,
    kRoleIdFieldNumber = 2,
  };
  // string accout = 1;
  void clear_accout();
  const std::string& accout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accout();
  PROTOBUF_MUST_USE_RESULT std::string* release_accout();
  void set_allocated_accout(std::string* accout);
  private:
  const std::string& _internal_accout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accout(const std::string& value);
  std::string* _internal_mutable_accout();
  public:

  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // int32 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoleLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class RoleLoginAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoleLoginAck) */ {
 public:
  inline RoleLoginAck() : RoleLoginAck(nullptr) {}
  ~RoleLoginAck() override;
  explicit constexpr RoleLoginAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleLoginAck(const RoleLoginAck& from);
  RoleLoginAck(RoleLoginAck&& from) noexcept
    : RoleLoginAck() {
    *this = ::std::move(from);
  }

  inline RoleLoginAck& operator=(const RoleLoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleLoginAck& operator=(RoleLoginAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleLoginAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleLoginAck* internal_default_instance() {
    return reinterpret_cast<const RoleLoginAck*>(
               &_RoleLoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoleLoginAck& a, RoleLoginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleLoginAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleLoginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleLoginAck* New() const final {
    return new RoleLoginAck();
  }

  RoleLoginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleLoginAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleLoginAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleLoginAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleLoginAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoleLoginAck";
  }
  protected:
  explicit RoleLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccoutFieldNumber = 1,
    kRoleNameFieldNumber = 3,
    kGwHostnameFieldNumber = 6,
    kSessionKeyFieldNumber = 10,
    kRoleIdFieldNumber = 2,
    kSceneIdFieldNumber = 4,
    kLastSceneIdFieldNumber = 5,
    kGwPortFieldNumber = 7,
    kServerTimeFieldNumber = 9,
    kGsIndexFieldNumber = 8,
    kResultFieldNumber = 11,
  };
  // string accout = 1;
  void clear_accout();
  const std::string& accout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accout();
  PROTOBUF_MUST_USE_RESULT std::string* release_accout();
  void set_allocated_accout(std::string* accout);
  private:
  const std::string& _internal_accout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accout(const std::string& value);
  std::string* _internal_mutable_accout();
  public:

  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // string gw_hostname = 6;
  void clear_gw_hostname();
  const std::string& gw_hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gw_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gw_hostname();
  PROTOBUF_MUST_USE_RESULT std::string* release_gw_hostname();
  void set_allocated_gw_hostname(std::string* gw_hostname);
  private:
  const std::string& _internal_gw_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gw_hostname(const std::string& value);
  std::string* _internal_mutable_gw_hostname();
  public:

  // string session_key = 10;
  void clear_session_key();
  const std::string& session_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // int32 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scene_id = 4;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_scene_id = 5;
  void clear_last_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 last_scene_id() const;
  void set_last_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_scene_id() const;
  void _internal_set_last_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gw_port = 7;
  void clear_gw_port();
  ::PROTOBUF_NAMESPACE_ID::int32 gw_port() const;
  void set_gw_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gw_port() const;
  void _internal_set_gw_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 server_time = 9;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::int64 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 gs_index = 8;
  void clear_gs_index();
  ::PROTOBUF_NAMESPACE_ID::int32 gs_index() const;
  void set_gs_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gs_index() const;
  void _internal_set_gs_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 11;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoleLoginAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accout_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gw_hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_scene_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 gw_port_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 gs_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateRoleReq) */ {
 public:
  inline CreateRoleReq() : CreateRoleReq(nullptr) {}
  ~CreateRoleReq() override;
  explicit constexpr CreateRoleReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoleReq(const CreateRoleReq& from);
  CreateRoleReq(CreateRoleReq&& from) noexcept
    : CreateRoleReq() {
    *this = ::std::move(from);
  }

  inline CreateRoleReq& operator=(const CreateRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleReq& operator=(CreateRoleReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoleReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoleReq* internal_default_instance() {
    return reinterpret_cast<const CreateRoleReq*>(
               &_CreateRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateRoleReq& a, CreateRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleReq* New() const final {
    return new CreateRoleReq();
  }

  CreateRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoleReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoleReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateRoleReq";
  }
  protected:
  explicit CreateRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 1,
    kLoginStrFieldNumber = 3,
    kPlatNameFieldNumber = 8,
    kUserUuidFieldNumber = 9,
    kLoginTimeFieldNumber = 2,
    kServerFieldNumber = 4,
    kAntiWallowFieldNumber = 5,
    kAvatarFieldNumber = 6,
    kSexFieldNumber = 7,
  };
  // string role_name = 1;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // string login_str = 3;
  void clear_login_str();
  const std::string& login_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_login_str();
  void set_allocated_login_str(std::string* login_str);
  private:
  const std::string& _internal_login_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login_str(const std::string& value);
  std::string* _internal_mutable_login_str();
  public:

  // string plat_name = 8;
  void clear_plat_name();
  const std::string& plat_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plat_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plat_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_plat_name();
  void set_allocated_plat_name(std::string* plat_name);
  private:
  const std::string& _internal_plat_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plat_name(const std::string& value);
  std::string* _internal_mutable_plat_name();
  public:

  // string user_uuid = 9;
  void clear_user_uuid();
  const std::string& user_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_uuid();
  void set_allocated_user_uuid(std::string* user_uuid);
  private:
  const std::string& _internal_user_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_uuid(const std::string& value);
  std::string* _internal_mutable_user_uuid();
  public:

  // uint32 login_time = 2;
  void clear_login_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 login_time() const;
  void set_login_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_login_time() const;
  void _internal_set_login_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 server = 4;
  void clear_server();
  ::PROTOBUF_NAMESPACE_ID::uint32 server() const;
  void set_server(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server() const;
  void _internal_set_server(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 anti_wallow = 5;
  void clear_anti_wallow();
  ::PROTOBUF_NAMESPACE_ID::uint32 anti_wallow() const;
  void set_anti_wallow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_anti_wallow() const;
  void _internal_set_anti_wallow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 avatar = 6;
  void clear_avatar();
  ::PROTOBUF_NAMESPACE_ID::uint32 avatar() const;
  void set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avatar() const;
  void _internal_set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sex = 7;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateRoleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plat_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_uuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 login_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_;
  ::PROTOBUF_NAMESPACE_ID::uint32 anti_wallow_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avatar_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateRoleAck) */ {
 public:
  inline CreateRoleAck() : CreateRoleAck(nullptr) {}
  ~CreateRoleAck() override;
  explicit constexpr CreateRoleAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoleAck(const CreateRoleAck& from);
  CreateRoleAck(CreateRoleAck&& from) noexcept
    : CreateRoleAck() {
    *this = ::std::move(from);
  }

  inline CreateRoleAck& operator=(const CreateRoleAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleAck& operator=(CreateRoleAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoleAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoleAck* internal_default_instance() {
    return reinterpret_cast<const CreateRoleAck*>(
               &_CreateRoleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateRoleAck& a, CreateRoleAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleAck* New() const final {
    return new CreateRoleAck();
  }

  CreateRoleAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoleAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoleAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateRoleAck";
  }
  protected:
  explicit CreateRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateRoleAck_RET_TYPE RET_TYPE;
  static constexpr RET_TYPE RESULT_TYPE_SUCC =
    CreateRoleAck_RET_TYPE_RESULT_TYPE_SUCC;
  static constexpr RET_TYPE RESULT_TYPE_NO_SPACE =
    CreateRoleAck_RET_TYPE_RESULT_TYPE_NO_SPACE;
  static constexpr RET_TYPE RESULT_TYPE_EXIST_NAME =
    CreateRoleAck_RET_TYPE_RESULT_TYPE_EXIST_NAME;
  static constexpr RET_TYPE RESULT_TYPE_NAME_INVALID =
    CreateRoleAck_RET_TYPE_RESULT_TYPE_NAME_INVALID;
  static constexpr RET_TYPE RESULT_TYPE_SERVER_LIMIT =
    CreateRoleAck_RET_TYPE_RESULT_TYPE_SERVER_LIMIT;
  static inline bool RET_TYPE_IsValid(int value) {
    return CreateRoleAck_RET_TYPE_IsValid(value);
  }
  static constexpr RET_TYPE RET_TYPE_MIN =
    CreateRoleAck_RET_TYPE_RET_TYPE_MIN;
  static constexpr RET_TYPE RET_TYPE_MAX =
    CreateRoleAck_RET_TYPE_RET_TYPE_MAX;
  static constexpr int RET_TYPE_ARRAYSIZE =
    CreateRoleAck_RET_TYPE_RET_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RET_TYPE_descriptor() {
    return CreateRoleAck_RET_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& RET_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RET_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RET_TYPE_Name.");
    return CreateRoleAck_RET_TYPE_Name(enum_t_value);
  }
  static inline bool RET_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RET_TYPE* value) {
    return CreateRoleAck_RET_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 3,
    kErrCodeFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kAvatarFieldNumber = 4,
    kSexFieldNumber = 5,
    kCreateTimeFieldNumber = 6,
  };
  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // int32 errCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 role_id = 2;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 avatar = 4;
  void clear_avatar();
  ::PROTOBUF_NAMESPACE_ID::uint32 avatar() const;
  void set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avatar() const;
  void _internal_set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sex = 5;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 create_time = 6;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateRoleAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 role_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avatar_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 create_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class UserEnterSceneReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserEnterSceneReq) */ {
 public:
  inline UserEnterSceneReq() : UserEnterSceneReq(nullptr) {}
  ~UserEnterSceneReq() override;
  explicit constexpr UserEnterSceneReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEnterSceneReq(const UserEnterSceneReq& from);
  UserEnterSceneReq(UserEnterSceneReq&& from) noexcept
    : UserEnterSceneReq() {
    *this = ::std::move(from);
  }

  inline UserEnterSceneReq& operator=(const UserEnterSceneReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEnterSceneReq& operator=(UserEnterSceneReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserEnterSceneReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEnterSceneReq* internal_default_instance() {
    return reinterpret_cast<const UserEnterSceneReq*>(
               &_UserEnterSceneReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserEnterSceneReq& a, UserEnterSceneReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEnterSceneReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEnterSceneReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEnterSceneReq* New() const final {
    return new UserEnterSceneReq();
  }

  UserEnterSceneReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEnterSceneReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserEnterSceneReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserEnterSceneReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEnterSceneReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserEnterSceneReq";
  }
  protected:
  explicit UserEnterSceneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 5,
    kKeyFieldNumber = 10,
    kUserUuidFieldNumber = 11,
    kSceneIdFieldNumber = 1,
    kSceneKeyFieldNumber = 2,
    kLastSceneIdFieldNumber = 3,
    kRoleIdFieldNumber = 4,
    kTimeFieldNumber = 6,
    kIsLoginFieldNumber = 7,
    kReserved1FieldNumber = 8,
    kServerFieldNumber = 9,
    kInvitationstatusFieldNumber = 12,
  };
  // string role_name = 5;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // string key = 10;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string user_uuid = 11;
  void clear_user_uuid();
  const std::string& user_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_uuid();
  void set_allocated_user_uuid(std::string* user_uuid);
  private:
  const std::string& _internal_user_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_uuid(const std::string& value);
  std::string* _internal_mutable_user_uuid();
  public:

  // int32 scene_id = 1;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scene_key = 2;
  void clear_scene_key();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_key() const;
  void set_scene_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_key() const;
  void _internal_set_scene_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_scene_id = 3;
  void clear_last_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 last_scene_id() const;
  void set_last_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_scene_id() const;
  void _internal_set_last_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 role_id = 4;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 6;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 is_login = 7;
  void clear_is_login();
  ::PROTOBUF_NAMESPACE_ID::uint32 is_login() const;
  void set_is_login(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_is_login() const;
  void _internal_set_is_login(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reserved1 = 8;
  void clear_reserved1();
  ::PROTOBUF_NAMESPACE_ID::uint32 reserved1() const;
  void set_reserved1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reserved1() const;
  void _internal_set_reserved1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 server = 9;
  void clear_server();
  ::PROTOBUF_NAMESPACE_ID::int32 server() const;
  void set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server() const;
  void _internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 invitationstatus = 12;
  void clear_invitationstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 invitationstatus() const;
  void set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invitationstatus() const;
  void _internal_set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UserEnterSceneReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_scene_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 is_login_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reserved1_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_;
  ::PROTOBUF_NAMESPACE_ID::int32 invitationstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class UserEnterSceneAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserEnterSceneAck) */ {
 public:
  inline UserEnterSceneAck() : UserEnterSceneAck(nullptr) {}
  ~UserEnterSceneAck() override;
  explicit constexpr UserEnterSceneAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserEnterSceneAck(const UserEnterSceneAck& from);
  UserEnterSceneAck(UserEnterSceneAck&& from) noexcept
    : UserEnterSceneAck() {
    *this = ::std::move(from);
  }

  inline UserEnterSceneAck& operator=(const UserEnterSceneAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserEnterSceneAck& operator=(UserEnterSceneAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserEnterSceneAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserEnterSceneAck* internal_default_instance() {
    return reinterpret_cast<const UserEnterSceneAck*>(
               &_UserEnterSceneAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserEnterSceneAck& a, UserEnterSceneAck& b) {
    a.Swap(&b);
  }
  inline void Swap(UserEnterSceneAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserEnterSceneAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserEnterSceneAck* New() const final {
    return new UserEnterSceneAck();
  }

  UserEnterSceneAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserEnterSceneAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserEnterSceneAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserEnterSceneAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserEnterSceneAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserEnterSceneAck";
  }
  protected:
  explicit UserEnterSceneAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // int32 errCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UserEnterSceneAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class RoleListNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoleListNotify) */ {
 public:
  inline RoleListNotify() : RoleListNotify(nullptr) {}
  ~RoleListNotify() override;
  explicit constexpr RoleListNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleListNotify(const RoleListNotify& from);
  RoleListNotify(RoleListNotify&& from) noexcept
    : RoleListNotify() {
    *this = ::std::move(from);
  }

  inline RoleListNotify& operator=(const RoleListNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleListNotify& operator=(RoleListNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleListNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleListNotify* internal_default_instance() {
    return reinterpret_cast<const RoleListNotify*>(
               &_RoleListNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoleListNotify& a, RoleListNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleListNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleListNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleListNotify* New() const final {
    return new RoleListNotify();
  }

  RoleListNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleListNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleListNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleListNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleListNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoleListNotify";
  }
  protected:
  explicit RoleListNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RoleListNotify_LoginAckCode LoginAckCode;
  static constexpr LoginAckCode LOGIN_RESULT_SUC =
    RoleListNotify_LoginAckCode_LOGIN_RESULT_SUC;
  static constexpr LoginAckCode LOGIN_NO_THREAD =
    RoleListNotify_LoginAckCode_LOGIN_NO_THREAD;
  static constexpr LoginAckCode LOGIN_SERVER_ERROR =
    RoleListNotify_LoginAckCode_LOGIN_SERVER_ERROR;
  static constexpr LoginAckCode LOGIN_RESULT_EXIST =
    RoleListNotify_LoginAckCode_LOGIN_RESULT_EXIST;
  static constexpr LoginAckCode LOGIN_SCENE_NOT_EXIST =
    RoleListNotify_LoginAckCode_LOGIN_SCENE_NOT_EXIST;
  static constexpr LoginAckCode LOGIN_RESULT_NO_GATEWAY =
    RoleListNotify_LoginAckCode_LOGIN_RESULT_NO_GATEWAY;
  static constexpr LoginAckCode LOGIN_RESULT_NO_ROLE =
    RoleListNotify_LoginAckCode_LOGIN_RESULT_NO_ROLE;
  static constexpr LoginAckCode LOGIN_THREAD_BUSY =
    RoleListNotify_LoginAckCode_LOGIN_THREAD_BUSY;
  static constexpr LoginAckCode LOGIN_LOGIN_FORBID =
    RoleListNotify_LoginAckCode_LOGIN_LOGIN_FORBID;
  static constexpr LoginAckCode LOGIN_ANTI_WALLOW =
    RoleListNotify_LoginAckCode_LOGIN_ANTI_WALLOW;
  static inline bool LoginAckCode_IsValid(int value) {
    return RoleListNotify_LoginAckCode_IsValid(value);
  }
  static constexpr LoginAckCode LoginAckCode_MIN =
    RoleListNotify_LoginAckCode_LoginAckCode_MIN;
  static constexpr LoginAckCode LoginAckCode_MAX =
    RoleListNotify_LoginAckCode_LoginAckCode_MAX;
  static constexpr int LoginAckCode_ARRAYSIZE =
    RoleListNotify_LoginAckCode_LoginAckCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoginAckCode_descriptor() {
    return RoleListNotify_LoginAckCode_descriptor();
  }
  template<typename T>
  static inline const std::string& LoginAckCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoginAckCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoginAckCode_Name.");
    return RoleListNotify_LoginAckCode_Name(enum_t_value);
  }
  static inline bool LoginAckCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LoginAckCode* value) {
    return RoleListNotify_LoginAckCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRoleItemFieldNumber = 6,
    kUserUuidFieldNumber = 3,
    kWalletFieldNumber = 4,
    kErrCodeFieldNumber = 1,
    kCountFieldNumber = 2,
    kInvitationstatusFieldNumber = 5,
  };
  // repeated .RoleItem roleItem = 6;
  int roleitem_size() const;
  private:
  int _internal_roleitem_size() const;
  public:
  void clear_roleitem();
  ::RoleItem* mutable_roleitem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleItem >*
      mutable_roleitem();
  private:
  const ::RoleItem& _internal_roleitem(int index) const;
  ::RoleItem* _internal_add_roleitem();
  public:
  const ::RoleItem& roleitem(int index) const;
  ::RoleItem* add_roleitem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleItem >&
      roleitem() const;

  // string user_uuid = 3;
  void clear_user_uuid();
  const std::string& user_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_uuid();
  void set_allocated_user_uuid(std::string* user_uuid);
  private:
  const std::string& _internal_user_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_uuid(const std::string& value);
  std::string* _internal_mutable_user_uuid();
  public:

  // string wallet = 4;
  void clear_wallet();
  const std::string& wallet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wallet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wallet();
  PROTOBUF_MUST_USE_RESULT std::string* release_wallet();
  void set_allocated_wallet(std::string* wallet);
  private:
  const std::string& _internal_wallet() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wallet(const std::string& value);
  std::string* _internal_mutable_wallet();
  public:

  // int32 errCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 invitationstatus = 5;
  void clear_invitationstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 invitationstatus() const;
  void set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invitationstatus() const;
  void _internal_set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoleListNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleItem > roleitem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 invitationstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class EnterSceneNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnterSceneNotify) */ {
 public:
  inline EnterSceneNotify() : EnterSceneNotify(nullptr) {}
  ~EnterSceneNotify() override;
  explicit constexpr EnterSceneNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterSceneNotify(const EnterSceneNotify& from);
  EnterSceneNotify(EnterSceneNotify&& from) noexcept
    : EnterSceneNotify() {
    *this = ::std::move(from);
  }

  inline EnterSceneNotify& operator=(const EnterSceneNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterSceneNotify& operator=(EnterSceneNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterSceneNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterSceneNotify* internal_default_instance() {
    return reinterpret_cast<const EnterSceneNotify*>(
               &_EnterSceneNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EnterSceneNotify& a, EnterSceneNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterSceneNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterSceneNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterSceneNotify* New() const final {
    return new EnterSceneNotify();
  }

  EnterSceneNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterSceneNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterSceneNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnterSceneNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterSceneNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnterSceneNotify";
  }
  protected:
  explicit EnterSceneNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneidFieldNumber = 1,
    kObjIdFieldNumber = 2,
    kOpenLineFieldNumber = 3,
    kPosXFieldNumber = 4,
    kPosYFieldNumber = 5,
    kHpFieldNumber = 6,
    kMaxHpFieldNumber = 7,
    kSceneKeyFieldNumber = 8,
    kHeightFieldNumber = 9,
    kPosZFieldNumber = 10,
  };
  // int32 sceneid = 1;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 obj_id = 2;
  void clear_obj_id();
  ::PROTOBUF_NAMESPACE_ID::int32 obj_id() const;
  void set_obj_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obj_id() const;
  void _internal_set_obj_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 open_line = 3;
  void clear_open_line();
  ::PROTOBUF_NAMESPACE_ID::int32 open_line() const;
  void set_open_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_open_line() const;
  void _internal_set_open_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float pos_x = 4;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 5;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // int32 hp = 6;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_hp = 7;
  void clear_max_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp() const;
  void set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_hp() const;
  void _internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scene_key = 8;
  void clear_scene_key();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_key() const;
  void set_scene_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_key() const;
  void _internal_set_scene_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float height = 9;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float pos_z = 10;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:EnterSceneNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid_;
  ::PROTOBUF_NAMESPACE_ID::int32 obj_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_line_;
  float pos_x_;
  float pos_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_key_;
  float height_;
  float pos_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LeaveSceneNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LeaveSceneNotify) */ {
 public:
  inline LeaveSceneNotify() : LeaveSceneNotify(nullptr) {}
  ~LeaveSceneNotify() override;
  explicit constexpr LeaveSceneNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveSceneNotify(const LeaveSceneNotify& from);
  LeaveSceneNotify(LeaveSceneNotify&& from) noexcept
    : LeaveSceneNotify() {
    *this = ::std::move(from);
  }

  inline LeaveSceneNotify& operator=(const LeaveSceneNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveSceneNotify& operator=(LeaveSceneNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveSceneNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveSceneNotify* internal_default_instance() {
    return reinterpret_cast<const LeaveSceneNotify*>(
               &_LeaveSceneNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LeaveSceneNotify& a, LeaveSceneNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveSceneNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveSceneNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveSceneNotify* New() const final {
    return new LeaveSceneNotify();
  }

  LeaveSceneNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveSceneNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveSceneNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LeaveSceneNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveSceneNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LeaveSceneNotify";
  }
  protected:
  explicit LeaveSceneNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneidFieldNumber = 1,
  };
  // int32 sceneid = 1;
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LeaveSceneNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class ObjMoveNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjMoveNotify) */ {
 public:
  inline ObjMoveNotify() : ObjMoveNotify(nullptr) {}
  ~ObjMoveNotify() override;
  explicit constexpr ObjMoveNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjMoveNotify(const ObjMoveNotify& from);
  ObjMoveNotify(ObjMoveNotify&& from) noexcept
    : ObjMoveNotify() {
    *this = ::std::move(from);
  }

  inline ObjMoveNotify& operator=(const ObjMoveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjMoveNotify& operator=(ObjMoveNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjMoveNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjMoveNotify* internal_default_instance() {
    return reinterpret_cast<const ObjMoveNotify*>(
               &_ObjMoveNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ObjMoveNotify& a, ObjMoveNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjMoveNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjMoveNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjMoveNotify* New() const final {
    return new ObjMoveNotify();
  }

  ObjMoveNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjMoveNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjMoveNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjMoveNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjMoveNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjMoveNotify";
  }
  protected:
  explicit ObjMoveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 1,
    kSpeedXFieldNumber = 2,
    kSpeedYFieldNumber = 3,
    kSpeedZFieldNumber = 4,
    kPosXFieldNumber = 5,
    kPosYFieldNumber = 6,
    kPosZFieldNumber = 7,
    kRotationXFieldNumber = 8,
    kRotationYFieldNumber = 9,
    kRotationZFieldNumber = 10,
    kReservedFieldNumber = 11,
    kObjIdFieldNumber = 12,
    kDistanceFieldNumber = 13,
    kMoveModeFieldNumber = 14,
    kReserve2FieldNumber = 15,
    kHeightFieldNumber = 16,
    kAccelerationXFieldNumber = 17,
    kAccelerationYFieldNumber = 18,
    kAccelerationZFieldNumber = 19,
    kControlRotationXFieldNumber = 20,
    kControlRotationYFieldNumber = 21,
    kControlRotationZFieldNumber = 22,
  };
  // float dir = 1;
  void clear_dir();
  float dir() const;
  void set_dir(float value);
  private:
  float _internal_dir() const;
  void _internal_set_dir(float value);
  public:

  // float speed_x = 2;
  void clear_speed_x();
  float speed_x() const;
  void set_speed_x(float value);
  private:
  float _internal_speed_x() const;
  void _internal_set_speed_x(float value);
  public:

  // float speed_y = 3;
  void clear_speed_y();
  float speed_y() const;
  void set_speed_y(float value);
  private:
  float _internal_speed_y() const;
  void _internal_set_speed_y(float value);
  public:

  // float speed_z = 4;
  void clear_speed_z();
  float speed_z() const;
  void set_speed_z(float value);
  private:
  float _internal_speed_z() const;
  void _internal_set_speed_z(float value);
  public:

  // float pos_x = 5;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 6;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_z = 7;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // float rotation_x = 8;
  void clear_rotation_x();
  float rotation_x() const;
  void set_rotation_x(float value);
  private:
  float _internal_rotation_x() const;
  void _internal_set_rotation_x(float value);
  public:

  // float rotation_y = 9;
  void clear_rotation_y();
  float rotation_y() const;
  void set_rotation_y(float value);
  private:
  float _internal_rotation_y() const;
  void _internal_set_rotation_y(float value);
  public:

  // float rotation_z = 10;
  void clear_rotation_z();
  float rotation_z() const;
  void set_rotation_z(float value);
  private:
  float _internal_rotation_z() const;
  void _internal_set_rotation_z(float value);
  public:

  // int32 reserved = 11;
  void clear_reserved();
  ::PROTOBUF_NAMESPACE_ID::int32 reserved() const;
  void set_reserved(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reserved() const;
  void _internal_set_reserved(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 obj_id = 12;
  void clear_obj_id();
  ::PROTOBUF_NAMESPACE_ID::int32 obj_id() const;
  void set_obj_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_obj_id() const;
  void _internal_set_obj_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float distance = 13;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // uint32 move_mode = 14;
  void clear_move_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 move_mode() const;
  void set_move_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_move_mode() const;
  void _internal_set_move_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reserve2 = 15;
  void clear_reserve2();
  ::PROTOBUF_NAMESPACE_ID::uint32 reserve2() const;
  void set_reserve2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reserve2() const;
  void _internal_set_reserve2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float height = 16;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float acceleration_x = 17;
  void clear_acceleration_x();
  float acceleration_x() const;
  void set_acceleration_x(float value);
  private:
  float _internal_acceleration_x() const;
  void _internal_set_acceleration_x(float value);
  public:

  // float acceleration_y = 18;
  void clear_acceleration_y();
  float acceleration_y() const;
  void set_acceleration_y(float value);
  private:
  float _internal_acceleration_y() const;
  void _internal_set_acceleration_y(float value);
  public:

  // float acceleration_z = 19;
  void clear_acceleration_z();
  float acceleration_z() const;
  void set_acceleration_z(float value);
  private:
  float _internal_acceleration_z() const;
  void _internal_set_acceleration_z(float value);
  public:

  // float controlRotation_x = 20;
  void clear_controlrotation_x();
  float controlrotation_x() const;
  void set_controlrotation_x(float value);
  private:
  float _internal_controlrotation_x() const;
  void _internal_set_controlrotation_x(float value);
  public:

  // float controlRotation_y = 21;
  void clear_controlrotation_y();
  float controlrotation_y() const;
  void set_controlrotation_y(float value);
  private:
  float _internal_controlrotation_y() const;
  void _internal_set_controlrotation_y(float value);
  public:

  // float controlRotation_z = 22;
  void clear_controlrotation_z();
  float controlrotation_z() const;
  void set_controlrotation_z(float value);
  private:
  float _internal_controlrotation_z() const;
  void _internal_set_controlrotation_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:ObjMoveNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float dir_;
  float speed_x_;
  float speed_y_;
  float speed_z_;
  float pos_x_;
  float pos_y_;
  float pos_z_;
  float rotation_x_;
  float rotation_y_;
  float rotation_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 reserved_;
  ::PROTOBUF_NAMESPACE_ID::int32 obj_id_;
  float distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 move_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reserve2_;
  float height_;
  float acceleration_x_;
  float acceleration_y_;
  float acceleration_z_;
  float controlrotation_x_;
  float controlrotation_y_;
  float controlrotation_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class ObjMoveReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjMoveReq) */ {
 public:
  inline ObjMoveReq() : ObjMoveReq(nullptr) {}
  ~ObjMoveReq() override;
  explicit constexpr ObjMoveReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjMoveReq(const ObjMoveReq& from);
  ObjMoveReq(ObjMoveReq&& from) noexcept
    : ObjMoveReq() {
    *this = ::std::move(from);
  }

  inline ObjMoveReq& operator=(const ObjMoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjMoveReq& operator=(ObjMoveReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjMoveReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjMoveReq* internal_default_instance() {
    return reinterpret_cast<const ObjMoveReq*>(
               &_ObjMoveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ObjMoveReq& a, ObjMoveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjMoveReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjMoveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjMoveReq* New() const final {
    return new ObjMoveReq();
  }

  ObjMoveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjMoveReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjMoveReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjMoveReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjMoveReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjMoveReq";
  }
  protected:
  explicit ObjMoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 1,
    kSpeedXFieldNumber = 2,
    kSpeedYFieldNumber = 3,
    kSpeedZFieldNumber = 4,
    kPosXFieldNumber = 5,
    kPosYFieldNumber = 6,
    kPosZFieldNumber = 7,
    kRotationXFieldNumber = 8,
    kRotationYFieldNumber = 9,
    kRotationZFieldNumber = 10,
    kDistanceFieldNumber = 11,
    kHeightFieldNumber = 12,
    kAccelerationXFieldNumber = 13,
    kAccelerationYFieldNumber = 14,
    kAccelerationZFieldNumber = 15,
    kControlRotationXFieldNumber = 16,
    kControlRotationYFieldNumber = 17,
    kControlRotationZFieldNumber = 18,
  };
  // float dir = 1;
  void clear_dir();
  float dir() const;
  void set_dir(float value);
  private:
  float _internal_dir() const;
  void _internal_set_dir(float value);
  public:

  // float speed_x = 2;
  void clear_speed_x();
  float speed_x() const;
  void set_speed_x(float value);
  private:
  float _internal_speed_x() const;
  void _internal_set_speed_x(float value);
  public:

  // float speed_y = 3;
  void clear_speed_y();
  float speed_y() const;
  void set_speed_y(float value);
  private:
  float _internal_speed_y() const;
  void _internal_set_speed_y(float value);
  public:

  // float speed_z = 4;
  void clear_speed_z();
  float speed_z() const;
  void set_speed_z(float value);
  private:
  float _internal_speed_z() const;
  void _internal_set_speed_z(float value);
  public:

  // float pos_x = 5;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 6;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_z = 7;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // float rotation_x = 8;
  void clear_rotation_x();
  float rotation_x() const;
  void set_rotation_x(float value);
  private:
  float _internal_rotation_x() const;
  void _internal_set_rotation_x(float value);
  public:

  // float rotation_y = 9;
  void clear_rotation_y();
  float rotation_y() const;
  void set_rotation_y(float value);
  private:
  float _internal_rotation_y() const;
  void _internal_set_rotation_y(float value);
  public:

  // float rotation_z = 10;
  void clear_rotation_z();
  float rotation_z() const;
  void set_rotation_z(float value);
  private:
  float _internal_rotation_z() const;
  void _internal_set_rotation_z(float value);
  public:

  // float distance = 11;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // float height = 12;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float acceleration_x = 13;
  void clear_acceleration_x();
  float acceleration_x() const;
  void set_acceleration_x(float value);
  private:
  float _internal_acceleration_x() const;
  void _internal_set_acceleration_x(float value);
  public:

  // float acceleration_y = 14;
  void clear_acceleration_y();
  float acceleration_y() const;
  void set_acceleration_y(float value);
  private:
  float _internal_acceleration_y() const;
  void _internal_set_acceleration_y(float value);
  public:

  // float acceleration_z = 15;
  void clear_acceleration_z();
  float acceleration_z() const;
  void set_acceleration_z(float value);
  private:
  float _internal_acceleration_z() const;
  void _internal_set_acceleration_z(float value);
  public:

  // float controlRotation_x = 16;
  void clear_controlrotation_x();
  float controlrotation_x() const;
  void set_controlrotation_x(float value);
  private:
  float _internal_controlrotation_x() const;
  void _internal_set_controlrotation_x(float value);
  public:

  // float controlRotation_y = 17;
  void clear_controlrotation_y();
  float controlrotation_y() const;
  void set_controlrotation_y(float value);
  private:
  float _internal_controlrotation_y() const;
  void _internal_set_controlrotation_y(float value);
  public:

  // float controlRotation_z = 18;
  void clear_controlrotation_z();
  float controlrotation_z() const;
  void set_controlrotation_z(float value);
  private:
  float _internal_controlrotation_z() const;
  void _internal_set_controlrotation_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:ObjMoveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float dir_;
  float speed_x_;
  float speed_y_;
  float speed_z_;
  float pos_x_;
  float pos_y_;
  float pos_z_;
  float rotation_x_;
  float rotation_y_;
  float rotation_z_;
  float distance_;
  float height_;
  float acceleration_x_;
  float acceleration_y_;
  float acceleration_z_;
  float controlrotation_x_;
  float controlrotation_y_;
  float controlrotation_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class VisibleObjEnterRoleNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VisibleObjEnterRoleNotify) */ {
 public:
  inline VisibleObjEnterRoleNotify() : VisibleObjEnterRoleNotify(nullptr) {}
  ~VisibleObjEnterRoleNotify() override;
  explicit constexpr VisibleObjEnterRoleNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VisibleObjEnterRoleNotify(const VisibleObjEnterRoleNotify& from);
  VisibleObjEnterRoleNotify(VisibleObjEnterRoleNotify&& from) noexcept
    : VisibleObjEnterRoleNotify() {
    *this = ::std::move(from);
  }

  inline VisibleObjEnterRoleNotify& operator=(const VisibleObjEnterRoleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisibleObjEnterRoleNotify& operator=(VisibleObjEnterRoleNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VisibleObjEnterRoleNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const VisibleObjEnterRoleNotify* internal_default_instance() {
    return reinterpret_cast<const VisibleObjEnterRoleNotify*>(
               &_VisibleObjEnterRoleNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VisibleObjEnterRoleNotify& a, VisibleObjEnterRoleNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(VisibleObjEnterRoleNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisibleObjEnterRoleNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisibleObjEnterRoleNotify* New() const final {
    return new VisibleObjEnterRoleNotify();
  }

  VisibleObjEnterRoleNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisibleObjEnterRoleNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VisibleObjEnterRoleNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VisibleObjEnterRoleNotify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisibleObjEnterRoleNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VisibleObjEnterRoleNotify";
  }
  protected:
  explicit VisibleObjEnterRoleNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 6,
    kDirFieldNumber = 1,
    kMoveModeParamFieldNumber = 2,
    kRoleStatusFieldNumber = 3,
    kObjIdFieldNumber = 4,
    kRoleIdFieldNumber = 5,
    kHpFieldNumber = 7,
    kMaxHpFieldNumber = 8,
    kLevelFieldNumber = 9,
    kSexFieldNumber = 10,
    kSpeedFieldNumber = 11,
    kPosXFieldNumber = 12,
    kPosYFieldNumber = 13,
    kDistanceFieldNumber = 14,
    kNameColorFieldNumber = 15,
    kMoveModeFieldNumber = 16,
    kAvatarFieldNumber = 17,
    kPosZFieldNumber = 18,
    kRotationXFieldNumber = 19,
    kRotationYFieldNumber = 20,
    kRotationZFieldNumber = 21,
  };
  // string role_name = 6;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // float dir = 1;
  void clear_dir();
  float dir() const;
  void set_dir(float value);
  private:
  float _internal_dir() const;
  void _internal_set_dir(float value);
  public:

  // uint32 move_mode_param = 2;
  void clear_move_mode_param();
  ::PROTOBUF_NAMESPACE_ID::uint32 move_mode_param() const;
  void set_move_mode_param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_move_mode_param() const;
  void _internal_set_move_mode_param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 role_status = 3;
  void clear_role_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 role_status() const;
  void set_role_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role_status() const;
  void _internal_set_role_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 obj_id = 4;
  void clear_obj_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 obj_id() const;
  void set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_obj_id() const;
  void _internal_set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 role_id = 5;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp = 7;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_hp = 8;
  void clear_max_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp() const;
  void set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_hp() const;
  void _internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 level = 9;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sex = 10;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 speed = 11;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::uint32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float pos_x = 12;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 13;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float distance = 14;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // uint32 name_color = 15;
  void clear_name_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 name_color() const;
  void set_name_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_name_color() const;
  void _internal_set_name_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 move_mode = 16;
  void clear_move_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 move_mode() const;
  void set_move_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_move_mode() const;
  void _internal_set_move_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 avatar = 17;
  void clear_avatar();
  ::PROTOBUF_NAMESPACE_ID::uint32 avatar() const;
  void set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avatar() const;
  void _internal_set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float pos_z = 18;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // float rotation_x = 19;
  void clear_rotation_x();
  float rotation_x() const;
  void set_rotation_x(float value);
  private:
  float _internal_rotation_x() const;
  void _internal_set_rotation_x(float value);
  public:

  // float rotation_y = 20;
  void clear_rotation_y();
  float rotation_y() const;
  void set_rotation_y(float value);
  private:
  float _internal_rotation_y() const;
  void _internal_set_rotation_y(float value);
  public:

  // float rotation_z = 21;
  void clear_rotation_z();
  float rotation_z() const;
  void set_rotation_z(float value);
  private:
  float _internal_rotation_z() const;
  void _internal_set_rotation_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:VisibleObjEnterRoleNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  float dir_;
  ::PROTOBUF_NAMESPACE_ID::uint32 move_mode_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 role_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 obj_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_;
  float pos_x_;
  float pos_y_;
  float distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 name_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 move_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avatar_;
  float pos_z_;
  float rotation_x_;
  float rotation_y_;
  float rotation_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class RoleItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoleItem) */ {
 public:
  inline RoleItem() : RoleItem(nullptr) {}
  ~RoleItem() override;
  explicit constexpr RoleItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleItem(const RoleItem& from);
  RoleItem(RoleItem&& from) noexcept
    : RoleItem() {
    *this = ::std::move(from);
  }

  inline RoleItem& operator=(const RoleItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleItem& operator=(RoleItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleItem* internal_default_instance() {
    return reinterpret_cast<const RoleItem*>(
               &_RoleItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RoleItem& a, RoleItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleItem* New() const final {
    return new RoleItem();
  }

  RoleItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoleItem";
  }
  protected:
  explicit RoleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kAvatarFieldNumber = 3,
    kSexFieldNumber = 4,
    kCreateTimeFieldNumber = 5,
    kLastLoginTimeFieldNumber = 6,
  };
  // string role_name = 2;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // int32 role_id = 1;
  void clear_role_id();
  ::PROTOBUF_NAMESPACE_ID::int32 role_id() const;
  void set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_id() const;
  void _internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 avatar = 3;
  void clear_avatar();
  ::PROTOBUF_NAMESPACE_ID::int32 avatar() const;
  void set_avatar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avatar() const;
  void _internal_set_avatar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sex = 4;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 create_time = 5;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 last_login_time = 6;
  void clear_last_login_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_login_time() const;
  void set_last_login_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_login_time() const;
  void _internal_set_last_login_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoleItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 avatar_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_login_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LoginMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginMsgReq) */ {
 public:
  inline LoginMsgReq() : LoginMsgReq(nullptr) {}
  ~LoginMsgReq() override;
  explicit constexpr LoginMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginMsgReq(const LoginMsgReq& from);
  LoginMsgReq(LoginMsgReq&& from) noexcept
    : LoginMsgReq() {
    *this = ::std::move(from);
  }

  inline LoginMsgReq& operator=(const LoginMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginMsgReq& operator=(LoginMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginMsgReq* internal_default_instance() {
    return reinterpret_cast<const LoginMsgReq*>(
               &_LoginMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LoginMsgReq& a, LoginMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginMsgReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginMsgReq* New() const final {
    return new LoginMsgReq();
  }

  LoginMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginMsgReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginMsgReq";
  }
  protected:
  explicit LoginMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTokenFieldNumber = 2,
    kUuidFieldNumber = 3,
    kWalletFieldNumber = 4,
    kInvitationstatusFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_MUST_USE_RESULT std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string wallet = 4;
  void clear_wallet();
  const std::string& wallet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wallet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wallet();
  PROTOBUF_MUST_USE_RESULT std::string* release_wallet();
  void set_allocated_wallet(std::string* wallet);
  private:
  const std::string& _internal_wallet() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wallet(const std::string& value);
  std::string* _internal_mutable_wallet();
  public:

  // int32 invitationstatus = 5;
  void clear_invitationstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 invitationstatus() const;
  void set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invitationstatus() const;
  void _internal_set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_;
  ::PROTOBUF_NAMESPACE_ID::int32 invitationstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoleLoginReq

// string accout = 1;
inline void RoleLoginReq::clear_accout() {
  accout_.ClearToEmpty();
}
inline const std::string& RoleLoginReq::accout() const {
  // @@protoc_insertion_point(field_get:RoleLoginReq.accout)
  return _internal_accout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginReq::set_accout(ArgT0&& arg0, ArgT... args) {
 
 accout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleLoginReq.accout)
}
inline std::string* RoleLoginReq::mutable_accout() {
  std::string* _s = _internal_mutable_accout();
  // @@protoc_insertion_point(field_mutable:RoleLoginReq.accout)
  return _s;
}
inline const std::string& RoleLoginReq::_internal_accout() const {
  return accout_.Get();
}
inline void RoleLoginReq::_internal_set_accout(const std::string& value) {
  
  accout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleLoginReq::_internal_mutable_accout() {
  
  return accout_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleLoginReq::release_accout() {
  // @@protoc_insertion_point(field_release:RoleLoginReq.accout)
  return accout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleLoginReq::set_allocated_accout(std::string* accout) {
  if (accout != nullptr) {
    
  } else {
    
  }
  accout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accout,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleLoginReq.accout)
}

// int32 role_id = 2;
inline void RoleLoginReq::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginReq::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginReq::role_id() const {
  // @@protoc_insertion_point(field_get:RoleLoginReq.role_id)
  return _internal_role_id();
}
inline void RoleLoginReq::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
}
inline void RoleLoginReq::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:RoleLoginReq.role_id)
}

// string role_name = 3;
inline void RoleLoginReq::clear_role_name() {
  role_name_.ClearToEmpty();
}
inline const std::string& RoleLoginReq::role_name() const {
  // @@protoc_insertion_point(field_get:RoleLoginReq.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginReq::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleLoginReq.role_name)
}
inline std::string* RoleLoginReq::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:RoleLoginReq.role_name)
  return _s;
}
inline const std::string& RoleLoginReq::_internal_role_name() const {
  return role_name_.Get();
}
inline void RoleLoginReq::_internal_set_role_name(const std::string& value) {
  
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleLoginReq::_internal_mutable_role_name() {
  
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleLoginReq::release_role_name() {
  // @@protoc_insertion_point(field_release:RoleLoginReq.role_name)
  return role_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleLoginReq::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleLoginReq.role_name)
}

// -------------------------------------------------------------------

// RoleLoginAck

// string accout = 1;
inline void RoleLoginAck::clear_accout() {
  accout_.ClearToEmpty();
}
inline const std::string& RoleLoginAck::accout() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.accout)
  return _internal_accout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginAck::set_accout(ArgT0&& arg0, ArgT... args) {
 
 accout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleLoginAck.accout)
}
inline std::string* RoleLoginAck::mutable_accout() {
  std::string* _s = _internal_mutable_accout();
  // @@protoc_insertion_point(field_mutable:RoleLoginAck.accout)
  return _s;
}
inline const std::string& RoleLoginAck::_internal_accout() const {
  return accout_.Get();
}
inline void RoleLoginAck::_internal_set_accout(const std::string& value) {
  
  accout_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleLoginAck::_internal_mutable_accout() {
  
  return accout_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleLoginAck::release_accout() {
  // @@protoc_insertion_point(field_release:RoleLoginAck.accout)
  return accout_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleLoginAck::set_allocated_accout(std::string* accout) {
  if (accout != nullptr) {
    
  } else {
    
  }
  accout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accout,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleLoginAck.accout)
}

// int32 role_id = 2;
inline void RoleLoginAck::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::role_id() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.role_id)
  return _internal_role_id();
}
inline void RoleLoginAck::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
}
inline void RoleLoginAck::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:RoleLoginAck.role_id)
}

// string role_name = 3;
inline void RoleLoginAck::clear_role_name() {
  role_name_.ClearToEmpty();
}
inline const std::string& RoleLoginAck::role_name() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginAck::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleLoginAck.role_name)
}
inline std::string* RoleLoginAck::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:RoleLoginAck.role_name)
  return _s;
}
inline const std::string& RoleLoginAck::_internal_role_name() const {
  return role_name_.Get();
}
inline void RoleLoginAck::_internal_set_role_name(const std::string& value) {
  
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleLoginAck::_internal_mutable_role_name() {
  
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleLoginAck::release_role_name() {
  // @@protoc_insertion_point(field_release:RoleLoginAck.role_name)
  return role_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleLoginAck::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleLoginAck.role_name)
}

// int32 scene_id = 4;
inline void RoleLoginAck::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::scene_id() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.scene_id)
  return _internal_scene_id();
}
inline void RoleLoginAck::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void RoleLoginAck::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:RoleLoginAck.scene_id)
}

// int32 last_scene_id = 5;
inline void RoleLoginAck::clear_last_scene_id() {
  last_scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::_internal_last_scene_id() const {
  return last_scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::last_scene_id() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.last_scene_id)
  return _internal_last_scene_id();
}
inline void RoleLoginAck::_internal_set_last_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_scene_id_ = value;
}
inline void RoleLoginAck::set_last_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_scene_id(value);
  // @@protoc_insertion_point(field_set:RoleLoginAck.last_scene_id)
}

// string gw_hostname = 6;
inline void RoleLoginAck::clear_gw_hostname() {
  gw_hostname_.ClearToEmpty();
}
inline const std::string& RoleLoginAck::gw_hostname() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.gw_hostname)
  return _internal_gw_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginAck::set_gw_hostname(ArgT0&& arg0, ArgT... args) {
 
 gw_hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleLoginAck.gw_hostname)
}
inline std::string* RoleLoginAck::mutable_gw_hostname() {
  std::string* _s = _internal_mutable_gw_hostname();
  // @@protoc_insertion_point(field_mutable:RoleLoginAck.gw_hostname)
  return _s;
}
inline const std::string& RoleLoginAck::_internal_gw_hostname() const {
  return gw_hostname_.Get();
}
inline void RoleLoginAck::_internal_set_gw_hostname(const std::string& value) {
  
  gw_hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleLoginAck::_internal_mutable_gw_hostname() {
  
  return gw_hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleLoginAck::release_gw_hostname() {
  // @@protoc_insertion_point(field_release:RoleLoginAck.gw_hostname)
  return gw_hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleLoginAck::set_allocated_gw_hostname(std::string* gw_hostname) {
  if (gw_hostname != nullptr) {
    
  } else {
    
  }
  gw_hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gw_hostname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleLoginAck.gw_hostname)
}

// int32 gw_port = 7;
inline void RoleLoginAck::clear_gw_port() {
  gw_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::_internal_gw_port() const {
  return gw_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::gw_port() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.gw_port)
  return _internal_gw_port();
}
inline void RoleLoginAck::_internal_set_gw_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gw_port_ = value;
}
inline void RoleLoginAck::set_gw_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gw_port(value);
  // @@protoc_insertion_point(field_set:RoleLoginAck.gw_port)
}

// int32 gs_index = 8;
inline void RoleLoginAck::clear_gs_index() {
  gs_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::_internal_gs_index() const {
  return gs_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::gs_index() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.gs_index)
  return _internal_gs_index();
}
inline void RoleLoginAck::_internal_set_gs_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gs_index_ = value;
}
inline void RoleLoginAck::set_gs_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gs_index(value);
  // @@protoc_insertion_point(field_set:RoleLoginAck.gs_index)
}

// int64 server_time = 9;
inline void RoleLoginAck::clear_server_time() {
  server_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleLoginAck::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleLoginAck::server_time() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.server_time)
  return _internal_server_time();
}
inline void RoleLoginAck::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_time_ = value;
}
inline void RoleLoginAck::set_server_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:RoleLoginAck.server_time)
}

// string session_key = 10;
inline void RoleLoginAck::clear_session_key() {
  session_key_.ClearToEmpty();
}
inline const std::string& RoleLoginAck::session_key() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.session_key)
  return _internal_session_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginAck::set_session_key(ArgT0&& arg0, ArgT... args) {
 
 session_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleLoginAck.session_key)
}
inline std::string* RoleLoginAck::mutable_session_key() {
  std::string* _s = _internal_mutable_session_key();
  // @@protoc_insertion_point(field_mutable:RoleLoginAck.session_key)
  return _s;
}
inline const std::string& RoleLoginAck::_internal_session_key() const {
  return session_key_.Get();
}
inline void RoleLoginAck::_internal_set_session_key(const std::string& value) {
  
  session_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleLoginAck::_internal_mutable_session_key() {
  
  return session_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleLoginAck::release_session_key() {
  // @@protoc_insertion_point(field_release:RoleLoginAck.session_key)
  return session_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleLoginAck::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  session_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleLoginAck.session_key)
}

// int32 result = 11;
inline void RoleLoginAck::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleLoginAck::result() const {
  // @@protoc_insertion_point(field_get:RoleLoginAck.result)
  return _internal_result();
}
inline void RoleLoginAck::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void RoleLoginAck::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:RoleLoginAck.result)
}

// -------------------------------------------------------------------

// CreateRoleReq

// string role_name = 1;
inline void CreateRoleReq::clear_role_name() {
  role_name_.ClearToEmpty();
}
inline const std::string& CreateRoleReq::role_name() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleReq::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateRoleReq.role_name)
}
inline std::string* CreateRoleReq::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:CreateRoleReq.role_name)
  return _s;
}
inline const std::string& CreateRoleReq::_internal_role_name() const {
  return role_name_.Get();
}
inline void CreateRoleReq::_internal_set_role_name(const std::string& value) {
  
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::_internal_mutable_role_name() {
  
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::release_role_name() {
  // @@protoc_insertion_point(field_release:CreateRoleReq.role_name)
  return role_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleReq::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateRoleReq.role_name)
}

// uint32 login_time = 2;
inline void CreateRoleReq::clear_login_time() {
  login_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::_internal_login_time() const {
  return login_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::login_time() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.login_time)
  return _internal_login_time();
}
inline void CreateRoleReq::_internal_set_login_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  login_time_ = value;
}
inline void CreateRoleReq::set_login_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_login_time(value);
  // @@protoc_insertion_point(field_set:CreateRoleReq.login_time)
}

// string login_str = 3;
inline void CreateRoleReq::clear_login_str() {
  login_str_.ClearToEmpty();
}
inline const std::string& CreateRoleReq::login_str() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.login_str)
  return _internal_login_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleReq::set_login_str(ArgT0&& arg0, ArgT... args) {
 
 login_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateRoleReq.login_str)
}
inline std::string* CreateRoleReq::mutable_login_str() {
  std::string* _s = _internal_mutable_login_str();
  // @@protoc_insertion_point(field_mutable:CreateRoleReq.login_str)
  return _s;
}
inline const std::string& CreateRoleReq::_internal_login_str() const {
  return login_str_.Get();
}
inline void CreateRoleReq::_internal_set_login_str(const std::string& value) {
  
  login_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::_internal_mutable_login_str() {
  
  return login_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::release_login_str() {
  // @@protoc_insertion_point(field_release:CreateRoleReq.login_str)
  return login_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleReq::set_allocated_login_str(std::string* login_str) {
  if (login_str != nullptr) {
    
  } else {
    
  }
  login_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateRoleReq.login_str)
}

// uint32 server = 4;
inline void CreateRoleReq::clear_server() {
  server_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::_internal_server() const {
  return server_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::server() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.server)
  return _internal_server();
}
inline void CreateRoleReq::_internal_set_server(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_ = value;
}
inline void CreateRoleReq::set_server(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:CreateRoleReq.server)
}

// uint32 anti_wallow = 5;
inline void CreateRoleReq::clear_anti_wallow() {
  anti_wallow_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::_internal_anti_wallow() const {
  return anti_wallow_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::anti_wallow() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.anti_wallow)
  return _internal_anti_wallow();
}
inline void CreateRoleReq::_internal_set_anti_wallow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  anti_wallow_ = value;
}
inline void CreateRoleReq::set_anti_wallow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_anti_wallow(value);
  // @@protoc_insertion_point(field_set:CreateRoleReq.anti_wallow)
}

// uint32 avatar = 6;
inline void CreateRoleReq::clear_avatar() {
  avatar_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::_internal_avatar() const {
  return avatar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::avatar() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.avatar)
  return _internal_avatar();
}
inline void CreateRoleReq::_internal_set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  avatar_ = value;
}
inline void CreateRoleReq::set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:CreateRoleReq.avatar)
}

// uint32 sex = 7;
inline void CreateRoleReq::clear_sex() {
  sex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleReq::sex() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.sex)
  return _internal_sex();
}
inline void CreateRoleReq::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sex_ = value;
}
inline void CreateRoleReq::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:CreateRoleReq.sex)
}

// string plat_name = 8;
inline void CreateRoleReq::clear_plat_name() {
  plat_name_.ClearToEmpty();
}
inline const std::string& CreateRoleReq::plat_name() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.plat_name)
  return _internal_plat_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleReq::set_plat_name(ArgT0&& arg0, ArgT... args) {
 
 plat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateRoleReq.plat_name)
}
inline std::string* CreateRoleReq::mutable_plat_name() {
  std::string* _s = _internal_mutable_plat_name();
  // @@protoc_insertion_point(field_mutable:CreateRoleReq.plat_name)
  return _s;
}
inline const std::string& CreateRoleReq::_internal_plat_name() const {
  return plat_name_.Get();
}
inline void CreateRoleReq::_internal_set_plat_name(const std::string& value) {
  
  plat_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::_internal_mutable_plat_name() {
  
  return plat_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::release_plat_name() {
  // @@protoc_insertion_point(field_release:CreateRoleReq.plat_name)
  return plat_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleReq::set_allocated_plat_name(std::string* plat_name) {
  if (plat_name != nullptr) {
    
  } else {
    
  }
  plat_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plat_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateRoleReq.plat_name)
}

// string user_uuid = 9;
inline void CreateRoleReq::clear_user_uuid() {
  user_uuid_.ClearToEmpty();
}
inline const std::string& CreateRoleReq::user_uuid() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.user_uuid)
  return _internal_user_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleReq::set_user_uuid(ArgT0&& arg0, ArgT... args) {
 
 user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateRoleReq.user_uuid)
}
inline std::string* CreateRoleReq::mutable_user_uuid() {
  std::string* _s = _internal_mutable_user_uuid();
  // @@protoc_insertion_point(field_mutable:CreateRoleReq.user_uuid)
  return _s;
}
inline const std::string& CreateRoleReq::_internal_user_uuid() const {
  return user_uuid_.Get();
}
inline void CreateRoleReq::_internal_set_user_uuid(const std::string& value) {
  
  user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::_internal_mutable_user_uuid() {
  
  return user_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::release_user_uuid() {
  // @@protoc_insertion_point(field_release:CreateRoleReq.user_uuid)
  return user_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleReq::set_allocated_user_uuid(std::string* user_uuid) {
  if (user_uuid != nullptr) {
    
  } else {
    
  }
  user_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateRoleReq.user_uuid)
}

// -------------------------------------------------------------------

// CreateRoleAck

// int32 errCode = 1;
inline void CreateRoleAck::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleAck::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleAck::errcode() const {
  // @@protoc_insertion_point(field_get:CreateRoleAck.errCode)
  return _internal_errcode();
}
inline void CreateRoleAck::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void CreateRoleAck::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CreateRoleAck.errCode)
}

// uint32 role_id = 2;
inline void CreateRoleAck::clear_role_id() {
  role_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleAck::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleAck::role_id() const {
  // @@protoc_insertion_point(field_get:CreateRoleAck.role_id)
  return _internal_role_id();
}
inline void CreateRoleAck::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  role_id_ = value;
}
inline void CreateRoleAck::set_role_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:CreateRoleAck.role_id)
}

// string role_name = 3;
inline void CreateRoleAck::clear_role_name() {
  role_name_.ClearToEmpty();
}
inline const std::string& CreateRoleAck::role_name() const {
  // @@protoc_insertion_point(field_get:CreateRoleAck.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleAck::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateRoleAck.role_name)
}
inline std::string* CreateRoleAck::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:CreateRoleAck.role_name)
  return _s;
}
inline const std::string& CreateRoleAck::_internal_role_name() const {
  return role_name_.Get();
}
inline void CreateRoleAck::_internal_set_role_name(const std::string& value) {
  
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleAck::_internal_mutable_role_name() {
  
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleAck::release_role_name() {
  // @@protoc_insertion_point(field_release:CreateRoleAck.role_name)
  return role_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleAck::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateRoleAck.role_name)
}

// uint32 avatar = 4;
inline void CreateRoleAck::clear_avatar() {
  avatar_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleAck::_internal_avatar() const {
  return avatar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleAck::avatar() const {
  // @@protoc_insertion_point(field_get:CreateRoleAck.avatar)
  return _internal_avatar();
}
inline void CreateRoleAck::_internal_set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  avatar_ = value;
}
inline void CreateRoleAck::set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:CreateRoleAck.avatar)
}

// uint32 sex = 5;
inline void CreateRoleAck::clear_sex() {
  sex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleAck::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateRoleAck::sex() const {
  // @@protoc_insertion_point(field_get:CreateRoleAck.sex)
  return _internal_sex();
}
inline void CreateRoleAck::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sex_ = value;
}
inline void CreateRoleAck::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:CreateRoleAck.sex)
}

// int32 create_time = 6;
inline void CreateRoleAck::clear_create_time() {
  create_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleAck::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleAck::create_time() const {
  // @@protoc_insertion_point(field_get:CreateRoleAck.create_time)
  return _internal_create_time();
}
inline void CreateRoleAck::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  create_time_ = value;
}
inline void CreateRoleAck::set_create_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:CreateRoleAck.create_time)
}

// -------------------------------------------------------------------

// UserEnterSceneReq

// int32 scene_id = 1;
inline void UserEnterSceneReq::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::scene_id() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.scene_id)
  return _internal_scene_id();
}
inline void UserEnterSceneReq::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void UserEnterSceneReq::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.scene_id)
}

// int32 scene_key = 2;
inline void UserEnterSceneReq::clear_scene_key() {
  scene_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::_internal_scene_key() const {
  return scene_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::scene_key() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.scene_key)
  return _internal_scene_key();
}
inline void UserEnterSceneReq::_internal_set_scene_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_key_ = value;
}
inline void UserEnterSceneReq::set_scene_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_key(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.scene_key)
}

// int32 last_scene_id = 3;
inline void UserEnterSceneReq::clear_last_scene_id() {
  last_scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::_internal_last_scene_id() const {
  return last_scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::last_scene_id() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.last_scene_id)
  return _internal_last_scene_id();
}
inline void UserEnterSceneReq::_internal_set_last_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_scene_id_ = value;
}
inline void UserEnterSceneReq::set_last_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_scene_id(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.last_scene_id)
}

// int32 role_id = 4;
inline void UserEnterSceneReq::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::role_id() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.role_id)
  return _internal_role_id();
}
inline void UserEnterSceneReq::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
}
inline void UserEnterSceneReq::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.role_id)
}

// string role_name = 5;
inline void UserEnterSceneReq::clear_role_name() {
  role_name_.ClearToEmpty();
}
inline const std::string& UserEnterSceneReq::role_name() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEnterSceneReq::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.role_name)
}
inline std::string* UserEnterSceneReq::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:UserEnterSceneReq.role_name)
  return _s;
}
inline const std::string& UserEnterSceneReq::_internal_role_name() const {
  return role_name_.Get();
}
inline void UserEnterSceneReq::_internal_set_role_name(const std::string& value) {
  
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserEnterSceneReq::_internal_mutable_role_name() {
  
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserEnterSceneReq::release_role_name() {
  // @@protoc_insertion_point(field_release:UserEnterSceneReq.role_name)
  return role_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserEnterSceneReq::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserEnterSceneReq.role_name)
}

// int32 time = 6;
inline void UserEnterSceneReq::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::time() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.time)
  return _internal_time();
}
inline void UserEnterSceneReq::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void UserEnterSceneReq::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.time)
}

// uint32 is_login = 7;
inline void UserEnterSceneReq::clear_is_login() {
  is_login_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserEnterSceneReq::_internal_is_login() const {
  return is_login_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserEnterSceneReq::is_login() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.is_login)
  return _internal_is_login();
}
inline void UserEnterSceneReq::_internal_set_is_login(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  is_login_ = value;
}
inline void UserEnterSceneReq::set_is_login(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_is_login(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.is_login)
}

// uint32 reserved1 = 8;
inline void UserEnterSceneReq::clear_reserved1() {
  reserved1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserEnterSceneReq::_internal_reserved1() const {
  return reserved1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserEnterSceneReq::reserved1() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.reserved1)
  return _internal_reserved1();
}
inline void UserEnterSceneReq::_internal_set_reserved1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reserved1_ = value;
}
inline void UserEnterSceneReq::set_reserved1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reserved1(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.reserved1)
}

// int32 server = 9;
inline void UserEnterSceneReq::clear_server() {
  server_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::_internal_server() const {
  return server_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::server() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.server)
  return _internal_server();
}
inline void UserEnterSceneReq::_internal_set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_ = value;
}
inline void UserEnterSceneReq::set_server(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.server)
}

// string key = 10;
inline void UserEnterSceneReq::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& UserEnterSceneReq::key() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEnterSceneReq::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.key)
}
inline std::string* UserEnterSceneReq::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:UserEnterSceneReq.key)
  return _s;
}
inline const std::string& UserEnterSceneReq::_internal_key() const {
  return key_.Get();
}
inline void UserEnterSceneReq::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserEnterSceneReq::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserEnterSceneReq::release_key() {
  // @@protoc_insertion_point(field_release:UserEnterSceneReq.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserEnterSceneReq::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserEnterSceneReq.key)
}

// string user_uuid = 11;
inline void UserEnterSceneReq::clear_user_uuid() {
  user_uuid_.ClearToEmpty();
}
inline const std::string& UserEnterSceneReq::user_uuid() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.user_uuid)
  return _internal_user_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserEnterSceneReq::set_user_uuid(ArgT0&& arg0, ArgT... args) {
 
 user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.user_uuid)
}
inline std::string* UserEnterSceneReq::mutable_user_uuid() {
  std::string* _s = _internal_mutable_user_uuid();
  // @@protoc_insertion_point(field_mutable:UserEnterSceneReq.user_uuid)
  return _s;
}
inline const std::string& UserEnterSceneReq::_internal_user_uuid() const {
  return user_uuid_.Get();
}
inline void UserEnterSceneReq::_internal_set_user_uuid(const std::string& value) {
  
  user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserEnterSceneReq::_internal_mutable_user_uuid() {
  
  return user_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserEnterSceneReq::release_user_uuid() {
  // @@protoc_insertion_point(field_release:UserEnterSceneReq.user_uuid)
  return user_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserEnterSceneReq::set_allocated_user_uuid(std::string* user_uuid) {
  if (user_uuid != nullptr) {
    
  } else {
    
  }
  user_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:UserEnterSceneReq.user_uuid)
}

// int32 invitationstatus = 12;
inline void UserEnterSceneReq::clear_invitationstatus() {
  invitationstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::_internal_invitationstatus() const {
  return invitationstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneReq::invitationstatus() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneReq.invitationstatus)
  return _internal_invitationstatus();
}
inline void UserEnterSceneReq::_internal_set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invitationstatus_ = value;
}
inline void UserEnterSceneReq::set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invitationstatus(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneReq.invitationstatus)
}

// -------------------------------------------------------------------

// UserEnterSceneAck

// int32 errCode = 1;
inline void UserEnterSceneAck::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneAck::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserEnterSceneAck::errcode() const {
  // @@protoc_insertion_point(field_get:UserEnterSceneAck.errCode)
  return _internal_errcode();
}
inline void UserEnterSceneAck::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void UserEnterSceneAck::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:UserEnterSceneAck.errCode)
}

// -------------------------------------------------------------------

// RoleListNotify

// int32 errCode = 1;
inline void RoleListNotify::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleListNotify::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleListNotify::errcode() const {
  // @@protoc_insertion_point(field_get:RoleListNotify.errCode)
  return _internal_errcode();
}
inline void RoleListNotify::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void RoleListNotify::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:RoleListNotify.errCode)
}

// int32 count = 2;
inline void RoleListNotify::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleListNotify::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleListNotify::count() const {
  // @@protoc_insertion_point(field_get:RoleListNotify.count)
  return _internal_count();
}
inline void RoleListNotify::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void RoleListNotify::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:RoleListNotify.count)
}

// string user_uuid = 3;
inline void RoleListNotify::clear_user_uuid() {
  user_uuid_.ClearToEmpty();
}
inline const std::string& RoleListNotify::user_uuid() const {
  // @@protoc_insertion_point(field_get:RoleListNotify.user_uuid)
  return _internal_user_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleListNotify::set_user_uuid(ArgT0&& arg0, ArgT... args) {
 
 user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleListNotify.user_uuid)
}
inline std::string* RoleListNotify::mutable_user_uuid() {
  std::string* _s = _internal_mutable_user_uuid();
  // @@protoc_insertion_point(field_mutable:RoleListNotify.user_uuid)
  return _s;
}
inline const std::string& RoleListNotify::_internal_user_uuid() const {
  return user_uuid_.Get();
}
inline void RoleListNotify::_internal_set_user_uuid(const std::string& value) {
  
  user_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleListNotify::_internal_mutable_user_uuid() {
  
  return user_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleListNotify::release_user_uuid() {
  // @@protoc_insertion_point(field_release:RoleListNotify.user_uuid)
  return user_uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleListNotify::set_allocated_user_uuid(std::string* user_uuid) {
  if (user_uuid != nullptr) {
    
  } else {
    
  }
  user_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleListNotify.user_uuid)
}

// string wallet = 4;
inline void RoleListNotify::clear_wallet() {
  wallet_.ClearToEmpty();
}
inline const std::string& RoleListNotify::wallet() const {
  // @@protoc_insertion_point(field_get:RoleListNotify.wallet)
  return _internal_wallet();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleListNotify::set_wallet(ArgT0&& arg0, ArgT... args) {
 
 wallet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleListNotify.wallet)
}
inline std::string* RoleListNotify::mutable_wallet() {
  std::string* _s = _internal_mutable_wallet();
  // @@protoc_insertion_point(field_mutable:RoleListNotify.wallet)
  return _s;
}
inline const std::string& RoleListNotify::_internal_wallet() const {
  return wallet_.Get();
}
inline void RoleListNotify::_internal_set_wallet(const std::string& value) {
  
  wallet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleListNotify::_internal_mutable_wallet() {
  
  return wallet_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleListNotify::release_wallet() {
  // @@protoc_insertion_point(field_release:RoleListNotify.wallet)
  return wallet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleListNotify::set_allocated_wallet(std::string* wallet) {
  if (wallet != nullptr) {
    
  } else {
    
  }
  wallet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wallet,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleListNotify.wallet)
}

// int32 invitationstatus = 5;
inline void RoleListNotify::clear_invitationstatus() {
  invitationstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleListNotify::_internal_invitationstatus() const {
  return invitationstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleListNotify::invitationstatus() const {
  // @@protoc_insertion_point(field_get:RoleListNotify.invitationstatus)
  return _internal_invitationstatus();
}
inline void RoleListNotify::_internal_set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invitationstatus_ = value;
}
inline void RoleListNotify::set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invitationstatus(value);
  // @@protoc_insertion_point(field_set:RoleListNotify.invitationstatus)
}

// repeated .RoleItem roleItem = 6;
inline int RoleListNotify::_internal_roleitem_size() const {
  return roleitem_.size();
}
inline int RoleListNotify::roleitem_size() const {
  return _internal_roleitem_size();
}
inline void RoleListNotify::clear_roleitem() {
  roleitem_.Clear();
}
inline ::RoleItem* RoleListNotify::mutable_roleitem(int index) {
  // @@protoc_insertion_point(field_mutable:RoleListNotify.roleItem)
  return roleitem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleItem >*
RoleListNotify::mutable_roleitem() {
  // @@protoc_insertion_point(field_mutable_list:RoleListNotify.roleItem)
  return &roleitem_;
}
inline const ::RoleItem& RoleListNotify::_internal_roleitem(int index) const {
  return roleitem_.Get(index);
}
inline const ::RoleItem& RoleListNotify::roleitem(int index) const {
  // @@protoc_insertion_point(field_get:RoleListNotify.roleItem)
  return _internal_roleitem(index);
}
inline ::RoleItem* RoleListNotify::_internal_add_roleitem() {
  return roleitem_.Add();
}
inline ::RoleItem* RoleListNotify::add_roleitem() {
  ::RoleItem* _add = _internal_add_roleitem();
  // @@protoc_insertion_point(field_add:RoleListNotify.roleItem)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleItem >&
RoleListNotify::roleitem() const {
  // @@protoc_insertion_point(field_list:RoleListNotify.roleItem)
  return roleitem_;
}

// -------------------------------------------------------------------

// EnterSceneNotify

// int32 sceneid = 1;
inline void EnterSceneNotify::clear_sceneid() {
  sceneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::sceneid() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.sceneid)
  return _internal_sceneid();
}
inline void EnterSceneNotify::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sceneid_ = value;
}
inline void EnterSceneNotify::set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.sceneid)
}

// int32 obj_id = 2;
inline void EnterSceneNotify::clear_obj_id() {
  obj_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::_internal_obj_id() const {
  return obj_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::obj_id() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.obj_id)
  return _internal_obj_id();
}
inline void EnterSceneNotify::_internal_set_obj_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obj_id_ = value;
}
inline void EnterSceneNotify::set_obj_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.obj_id)
}

// int32 open_line = 3;
inline void EnterSceneNotify::clear_open_line() {
  open_line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::_internal_open_line() const {
  return open_line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::open_line() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.open_line)
  return _internal_open_line();
}
inline void EnterSceneNotify::_internal_set_open_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_line_ = value;
}
inline void EnterSceneNotify::set_open_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_open_line(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.open_line)
}

// float pos_x = 4;
inline void EnterSceneNotify::clear_pos_x() {
  pos_x_ = 0;
}
inline float EnterSceneNotify::_internal_pos_x() const {
  return pos_x_;
}
inline float EnterSceneNotify::pos_x() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.pos_x)
  return _internal_pos_x();
}
inline void EnterSceneNotify::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void EnterSceneNotify::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.pos_x)
}

// float pos_y = 5;
inline void EnterSceneNotify::clear_pos_y() {
  pos_y_ = 0;
}
inline float EnterSceneNotify::_internal_pos_y() const {
  return pos_y_;
}
inline float EnterSceneNotify::pos_y() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.pos_y)
  return _internal_pos_y();
}
inline void EnterSceneNotify::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void EnterSceneNotify::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.pos_y)
}

// int32 hp = 6;
inline void EnterSceneNotify::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::hp() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.hp)
  return _internal_hp();
}
inline void EnterSceneNotify::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void EnterSceneNotify::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.hp)
}

// int32 max_hp = 7;
inline void EnterSceneNotify::clear_max_hp() {
  max_hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::_internal_max_hp() const {
  return max_hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::max_hp() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.max_hp)
  return _internal_max_hp();
}
inline void EnterSceneNotify::_internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_hp_ = value;
}
inline void EnterSceneNotify::set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.max_hp)
}

// int32 scene_key = 8;
inline void EnterSceneNotify::clear_scene_key() {
  scene_key_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::_internal_scene_key() const {
  return scene_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnterSceneNotify::scene_key() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.scene_key)
  return _internal_scene_key();
}
inline void EnterSceneNotify::_internal_set_scene_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_key_ = value;
}
inline void EnterSceneNotify::set_scene_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_key(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.scene_key)
}

// float height = 9;
inline void EnterSceneNotify::clear_height() {
  height_ = 0;
}
inline float EnterSceneNotify::_internal_height() const {
  return height_;
}
inline float EnterSceneNotify::height() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.height)
  return _internal_height();
}
inline void EnterSceneNotify::_internal_set_height(float value) {
  
  height_ = value;
}
inline void EnterSceneNotify::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.height)
}

// float pos_z = 10;
inline void EnterSceneNotify::clear_pos_z() {
  pos_z_ = 0;
}
inline float EnterSceneNotify::_internal_pos_z() const {
  return pos_z_;
}
inline float EnterSceneNotify::pos_z() const {
  // @@protoc_insertion_point(field_get:EnterSceneNotify.pos_z)
  return _internal_pos_z();
}
inline void EnterSceneNotify::_internal_set_pos_z(float value) {
  
  pos_z_ = value;
}
inline void EnterSceneNotify::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:EnterSceneNotify.pos_z)
}

// -------------------------------------------------------------------

// LeaveSceneNotify

// int32 sceneid = 1;
inline void LeaveSceneNotify::clear_sceneid() {
  sceneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveSceneNotify::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveSceneNotify::sceneid() const {
  // @@protoc_insertion_point(field_get:LeaveSceneNotify.sceneid)
  return _internal_sceneid();
}
inline void LeaveSceneNotify::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sceneid_ = value;
}
inline void LeaveSceneNotify::set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:LeaveSceneNotify.sceneid)
}

// -------------------------------------------------------------------

// ObjMoveNotify

// float dir = 1;
inline void ObjMoveNotify::clear_dir() {
  dir_ = 0;
}
inline float ObjMoveNotify::_internal_dir() const {
  return dir_;
}
inline float ObjMoveNotify::dir() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.dir)
  return _internal_dir();
}
inline void ObjMoveNotify::_internal_set_dir(float value) {
  
  dir_ = value;
}
inline void ObjMoveNotify::set_dir(float value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.dir)
}

// float speed_x = 2;
inline void ObjMoveNotify::clear_speed_x() {
  speed_x_ = 0;
}
inline float ObjMoveNotify::_internal_speed_x() const {
  return speed_x_;
}
inline float ObjMoveNotify::speed_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.speed_x)
  return _internal_speed_x();
}
inline void ObjMoveNotify::_internal_set_speed_x(float value) {
  
  speed_x_ = value;
}
inline void ObjMoveNotify::set_speed_x(float value) {
  _internal_set_speed_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.speed_x)
}

// float speed_y = 3;
inline void ObjMoveNotify::clear_speed_y() {
  speed_y_ = 0;
}
inline float ObjMoveNotify::_internal_speed_y() const {
  return speed_y_;
}
inline float ObjMoveNotify::speed_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.speed_y)
  return _internal_speed_y();
}
inline void ObjMoveNotify::_internal_set_speed_y(float value) {
  
  speed_y_ = value;
}
inline void ObjMoveNotify::set_speed_y(float value) {
  _internal_set_speed_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.speed_y)
}

// float speed_z = 4;
inline void ObjMoveNotify::clear_speed_z() {
  speed_z_ = 0;
}
inline float ObjMoveNotify::_internal_speed_z() const {
  return speed_z_;
}
inline float ObjMoveNotify::speed_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.speed_z)
  return _internal_speed_z();
}
inline void ObjMoveNotify::_internal_set_speed_z(float value) {
  
  speed_z_ = value;
}
inline void ObjMoveNotify::set_speed_z(float value) {
  _internal_set_speed_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.speed_z)
}

// float pos_x = 5;
inline void ObjMoveNotify::clear_pos_x() {
  pos_x_ = 0;
}
inline float ObjMoveNotify::_internal_pos_x() const {
  return pos_x_;
}
inline float ObjMoveNotify::pos_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.pos_x)
  return _internal_pos_x();
}
inline void ObjMoveNotify::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void ObjMoveNotify::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.pos_x)
}

// float pos_y = 6;
inline void ObjMoveNotify::clear_pos_y() {
  pos_y_ = 0;
}
inline float ObjMoveNotify::_internal_pos_y() const {
  return pos_y_;
}
inline float ObjMoveNotify::pos_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.pos_y)
  return _internal_pos_y();
}
inline void ObjMoveNotify::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void ObjMoveNotify::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.pos_y)
}

// float pos_z = 7;
inline void ObjMoveNotify::clear_pos_z() {
  pos_z_ = 0;
}
inline float ObjMoveNotify::_internal_pos_z() const {
  return pos_z_;
}
inline float ObjMoveNotify::pos_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.pos_z)
  return _internal_pos_z();
}
inline void ObjMoveNotify::_internal_set_pos_z(float value) {
  
  pos_z_ = value;
}
inline void ObjMoveNotify::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.pos_z)
}

// float rotation_x = 8;
inline void ObjMoveNotify::clear_rotation_x() {
  rotation_x_ = 0;
}
inline float ObjMoveNotify::_internal_rotation_x() const {
  return rotation_x_;
}
inline float ObjMoveNotify::rotation_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.rotation_x)
  return _internal_rotation_x();
}
inline void ObjMoveNotify::_internal_set_rotation_x(float value) {
  
  rotation_x_ = value;
}
inline void ObjMoveNotify::set_rotation_x(float value) {
  _internal_set_rotation_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.rotation_x)
}

// float rotation_y = 9;
inline void ObjMoveNotify::clear_rotation_y() {
  rotation_y_ = 0;
}
inline float ObjMoveNotify::_internal_rotation_y() const {
  return rotation_y_;
}
inline float ObjMoveNotify::rotation_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.rotation_y)
  return _internal_rotation_y();
}
inline void ObjMoveNotify::_internal_set_rotation_y(float value) {
  
  rotation_y_ = value;
}
inline void ObjMoveNotify::set_rotation_y(float value) {
  _internal_set_rotation_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.rotation_y)
}

// float rotation_z = 10;
inline void ObjMoveNotify::clear_rotation_z() {
  rotation_z_ = 0;
}
inline float ObjMoveNotify::_internal_rotation_z() const {
  return rotation_z_;
}
inline float ObjMoveNotify::rotation_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.rotation_z)
  return _internal_rotation_z();
}
inline void ObjMoveNotify::_internal_set_rotation_z(float value) {
  
  rotation_z_ = value;
}
inline void ObjMoveNotify::set_rotation_z(float value) {
  _internal_set_rotation_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.rotation_z)
}

// int32 reserved = 11;
inline void ObjMoveNotify::clear_reserved() {
  reserved_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjMoveNotify::_internal_reserved() const {
  return reserved_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjMoveNotify::reserved() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.reserved)
  return _internal_reserved();
}
inline void ObjMoveNotify::_internal_set_reserved(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reserved_ = value;
}
inline void ObjMoveNotify::set_reserved(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reserved(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.reserved)
}

// int32 obj_id = 12;
inline void ObjMoveNotify::clear_obj_id() {
  obj_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjMoveNotify::_internal_obj_id() const {
  return obj_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjMoveNotify::obj_id() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.obj_id)
  return _internal_obj_id();
}
inline void ObjMoveNotify::_internal_set_obj_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  obj_id_ = value;
}
inline void ObjMoveNotify::set_obj_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.obj_id)
}

// float distance = 13;
inline void ObjMoveNotify::clear_distance() {
  distance_ = 0;
}
inline float ObjMoveNotify::_internal_distance() const {
  return distance_;
}
inline float ObjMoveNotify::distance() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.distance)
  return _internal_distance();
}
inline void ObjMoveNotify::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void ObjMoveNotify::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.distance)
}

// uint32 move_mode = 14;
inline void ObjMoveNotify::clear_move_mode() {
  move_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjMoveNotify::_internal_move_mode() const {
  return move_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjMoveNotify::move_mode() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.move_mode)
  return _internal_move_mode();
}
inline void ObjMoveNotify::_internal_set_move_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  move_mode_ = value;
}
inline void ObjMoveNotify::set_move_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_move_mode(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.move_mode)
}

// uint32 reserve2 = 15;
inline void ObjMoveNotify::clear_reserve2() {
  reserve2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjMoveNotify::_internal_reserve2() const {
  return reserve2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjMoveNotify::reserve2() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.reserve2)
  return _internal_reserve2();
}
inline void ObjMoveNotify::_internal_set_reserve2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reserve2_ = value;
}
inline void ObjMoveNotify::set_reserve2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reserve2(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.reserve2)
}

// float height = 16;
inline void ObjMoveNotify::clear_height() {
  height_ = 0;
}
inline float ObjMoveNotify::_internal_height() const {
  return height_;
}
inline float ObjMoveNotify::height() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.height)
  return _internal_height();
}
inline void ObjMoveNotify::_internal_set_height(float value) {
  
  height_ = value;
}
inline void ObjMoveNotify::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.height)
}

// float acceleration_x = 17;
inline void ObjMoveNotify::clear_acceleration_x() {
  acceleration_x_ = 0;
}
inline float ObjMoveNotify::_internal_acceleration_x() const {
  return acceleration_x_;
}
inline float ObjMoveNotify::acceleration_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.acceleration_x)
  return _internal_acceleration_x();
}
inline void ObjMoveNotify::_internal_set_acceleration_x(float value) {
  
  acceleration_x_ = value;
}
inline void ObjMoveNotify::set_acceleration_x(float value) {
  _internal_set_acceleration_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.acceleration_x)
}

// float acceleration_y = 18;
inline void ObjMoveNotify::clear_acceleration_y() {
  acceleration_y_ = 0;
}
inline float ObjMoveNotify::_internal_acceleration_y() const {
  return acceleration_y_;
}
inline float ObjMoveNotify::acceleration_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.acceleration_y)
  return _internal_acceleration_y();
}
inline void ObjMoveNotify::_internal_set_acceleration_y(float value) {
  
  acceleration_y_ = value;
}
inline void ObjMoveNotify::set_acceleration_y(float value) {
  _internal_set_acceleration_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.acceleration_y)
}

// float acceleration_z = 19;
inline void ObjMoveNotify::clear_acceleration_z() {
  acceleration_z_ = 0;
}
inline float ObjMoveNotify::_internal_acceleration_z() const {
  return acceleration_z_;
}
inline float ObjMoveNotify::acceleration_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.acceleration_z)
  return _internal_acceleration_z();
}
inline void ObjMoveNotify::_internal_set_acceleration_z(float value) {
  
  acceleration_z_ = value;
}
inline void ObjMoveNotify::set_acceleration_z(float value) {
  _internal_set_acceleration_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.acceleration_z)
}

// float controlRotation_x = 20;
inline void ObjMoveNotify::clear_controlrotation_x() {
  controlrotation_x_ = 0;
}
inline float ObjMoveNotify::_internal_controlrotation_x() const {
  return controlrotation_x_;
}
inline float ObjMoveNotify::controlrotation_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.controlRotation_x)
  return _internal_controlrotation_x();
}
inline void ObjMoveNotify::_internal_set_controlrotation_x(float value) {
  
  controlrotation_x_ = value;
}
inline void ObjMoveNotify::set_controlrotation_x(float value) {
  _internal_set_controlrotation_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.controlRotation_x)
}

// float controlRotation_y = 21;
inline void ObjMoveNotify::clear_controlrotation_y() {
  controlrotation_y_ = 0;
}
inline float ObjMoveNotify::_internal_controlrotation_y() const {
  return controlrotation_y_;
}
inline float ObjMoveNotify::controlrotation_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.controlRotation_y)
  return _internal_controlrotation_y();
}
inline void ObjMoveNotify::_internal_set_controlrotation_y(float value) {
  
  controlrotation_y_ = value;
}
inline void ObjMoveNotify::set_controlrotation_y(float value) {
  _internal_set_controlrotation_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.controlRotation_y)
}

// float controlRotation_z = 22;
inline void ObjMoveNotify::clear_controlrotation_z() {
  controlrotation_z_ = 0;
}
inline float ObjMoveNotify::_internal_controlrotation_z() const {
  return controlrotation_z_;
}
inline float ObjMoveNotify::controlrotation_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveNotify.controlRotation_z)
  return _internal_controlrotation_z();
}
inline void ObjMoveNotify::_internal_set_controlrotation_z(float value) {
  
  controlrotation_z_ = value;
}
inline void ObjMoveNotify::set_controlrotation_z(float value) {
  _internal_set_controlrotation_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveNotify.controlRotation_z)
}

// -------------------------------------------------------------------

// ObjMoveReq

// float dir = 1;
inline void ObjMoveReq::clear_dir() {
  dir_ = 0;
}
inline float ObjMoveReq::_internal_dir() const {
  return dir_;
}
inline float ObjMoveReq::dir() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.dir)
  return _internal_dir();
}
inline void ObjMoveReq::_internal_set_dir(float value) {
  
  dir_ = value;
}
inline void ObjMoveReq::set_dir(float value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.dir)
}

// float speed_x = 2;
inline void ObjMoveReq::clear_speed_x() {
  speed_x_ = 0;
}
inline float ObjMoveReq::_internal_speed_x() const {
  return speed_x_;
}
inline float ObjMoveReq::speed_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.speed_x)
  return _internal_speed_x();
}
inline void ObjMoveReq::_internal_set_speed_x(float value) {
  
  speed_x_ = value;
}
inline void ObjMoveReq::set_speed_x(float value) {
  _internal_set_speed_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.speed_x)
}

// float speed_y = 3;
inline void ObjMoveReq::clear_speed_y() {
  speed_y_ = 0;
}
inline float ObjMoveReq::_internal_speed_y() const {
  return speed_y_;
}
inline float ObjMoveReq::speed_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.speed_y)
  return _internal_speed_y();
}
inline void ObjMoveReq::_internal_set_speed_y(float value) {
  
  speed_y_ = value;
}
inline void ObjMoveReq::set_speed_y(float value) {
  _internal_set_speed_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.speed_y)
}

// float speed_z = 4;
inline void ObjMoveReq::clear_speed_z() {
  speed_z_ = 0;
}
inline float ObjMoveReq::_internal_speed_z() const {
  return speed_z_;
}
inline float ObjMoveReq::speed_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.speed_z)
  return _internal_speed_z();
}
inline void ObjMoveReq::_internal_set_speed_z(float value) {
  
  speed_z_ = value;
}
inline void ObjMoveReq::set_speed_z(float value) {
  _internal_set_speed_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.speed_z)
}

// float pos_x = 5;
inline void ObjMoveReq::clear_pos_x() {
  pos_x_ = 0;
}
inline float ObjMoveReq::_internal_pos_x() const {
  return pos_x_;
}
inline float ObjMoveReq::pos_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.pos_x)
  return _internal_pos_x();
}
inline void ObjMoveReq::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void ObjMoveReq::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.pos_x)
}

// float pos_y = 6;
inline void ObjMoveReq::clear_pos_y() {
  pos_y_ = 0;
}
inline float ObjMoveReq::_internal_pos_y() const {
  return pos_y_;
}
inline float ObjMoveReq::pos_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.pos_y)
  return _internal_pos_y();
}
inline void ObjMoveReq::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void ObjMoveReq::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.pos_y)
}

// float pos_z = 7;
inline void ObjMoveReq::clear_pos_z() {
  pos_z_ = 0;
}
inline float ObjMoveReq::_internal_pos_z() const {
  return pos_z_;
}
inline float ObjMoveReq::pos_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.pos_z)
  return _internal_pos_z();
}
inline void ObjMoveReq::_internal_set_pos_z(float value) {
  
  pos_z_ = value;
}
inline void ObjMoveReq::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.pos_z)
}

// float rotation_x = 8;
inline void ObjMoveReq::clear_rotation_x() {
  rotation_x_ = 0;
}
inline float ObjMoveReq::_internal_rotation_x() const {
  return rotation_x_;
}
inline float ObjMoveReq::rotation_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.rotation_x)
  return _internal_rotation_x();
}
inline void ObjMoveReq::_internal_set_rotation_x(float value) {
  
  rotation_x_ = value;
}
inline void ObjMoveReq::set_rotation_x(float value) {
  _internal_set_rotation_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.rotation_x)
}

// float rotation_y = 9;
inline void ObjMoveReq::clear_rotation_y() {
  rotation_y_ = 0;
}
inline float ObjMoveReq::_internal_rotation_y() const {
  return rotation_y_;
}
inline float ObjMoveReq::rotation_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.rotation_y)
  return _internal_rotation_y();
}
inline void ObjMoveReq::_internal_set_rotation_y(float value) {
  
  rotation_y_ = value;
}
inline void ObjMoveReq::set_rotation_y(float value) {
  _internal_set_rotation_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.rotation_y)
}

// float rotation_z = 10;
inline void ObjMoveReq::clear_rotation_z() {
  rotation_z_ = 0;
}
inline float ObjMoveReq::_internal_rotation_z() const {
  return rotation_z_;
}
inline float ObjMoveReq::rotation_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.rotation_z)
  return _internal_rotation_z();
}
inline void ObjMoveReq::_internal_set_rotation_z(float value) {
  
  rotation_z_ = value;
}
inline void ObjMoveReq::set_rotation_z(float value) {
  _internal_set_rotation_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.rotation_z)
}

// float distance = 11;
inline void ObjMoveReq::clear_distance() {
  distance_ = 0;
}
inline float ObjMoveReq::_internal_distance() const {
  return distance_;
}
inline float ObjMoveReq::distance() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.distance)
  return _internal_distance();
}
inline void ObjMoveReq::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void ObjMoveReq::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.distance)
}

// float height = 12;
inline void ObjMoveReq::clear_height() {
  height_ = 0;
}
inline float ObjMoveReq::_internal_height() const {
  return height_;
}
inline float ObjMoveReq::height() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.height)
  return _internal_height();
}
inline void ObjMoveReq::_internal_set_height(float value) {
  
  height_ = value;
}
inline void ObjMoveReq::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.height)
}

// float acceleration_x = 13;
inline void ObjMoveReq::clear_acceleration_x() {
  acceleration_x_ = 0;
}
inline float ObjMoveReq::_internal_acceleration_x() const {
  return acceleration_x_;
}
inline float ObjMoveReq::acceleration_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.acceleration_x)
  return _internal_acceleration_x();
}
inline void ObjMoveReq::_internal_set_acceleration_x(float value) {
  
  acceleration_x_ = value;
}
inline void ObjMoveReq::set_acceleration_x(float value) {
  _internal_set_acceleration_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.acceleration_x)
}

// float acceleration_y = 14;
inline void ObjMoveReq::clear_acceleration_y() {
  acceleration_y_ = 0;
}
inline float ObjMoveReq::_internal_acceleration_y() const {
  return acceleration_y_;
}
inline float ObjMoveReq::acceleration_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.acceleration_y)
  return _internal_acceleration_y();
}
inline void ObjMoveReq::_internal_set_acceleration_y(float value) {
  
  acceleration_y_ = value;
}
inline void ObjMoveReq::set_acceleration_y(float value) {
  _internal_set_acceleration_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.acceleration_y)
}

// float acceleration_z = 15;
inline void ObjMoveReq::clear_acceleration_z() {
  acceleration_z_ = 0;
}
inline float ObjMoveReq::_internal_acceleration_z() const {
  return acceleration_z_;
}
inline float ObjMoveReq::acceleration_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.acceleration_z)
  return _internal_acceleration_z();
}
inline void ObjMoveReq::_internal_set_acceleration_z(float value) {
  
  acceleration_z_ = value;
}
inline void ObjMoveReq::set_acceleration_z(float value) {
  _internal_set_acceleration_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.acceleration_z)
}

// float controlRotation_x = 16;
inline void ObjMoveReq::clear_controlrotation_x() {
  controlrotation_x_ = 0;
}
inline float ObjMoveReq::_internal_controlrotation_x() const {
  return controlrotation_x_;
}
inline float ObjMoveReq::controlrotation_x() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.controlRotation_x)
  return _internal_controlrotation_x();
}
inline void ObjMoveReq::_internal_set_controlrotation_x(float value) {
  
  controlrotation_x_ = value;
}
inline void ObjMoveReq::set_controlrotation_x(float value) {
  _internal_set_controlrotation_x(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.controlRotation_x)
}

// float controlRotation_y = 17;
inline void ObjMoveReq::clear_controlrotation_y() {
  controlrotation_y_ = 0;
}
inline float ObjMoveReq::_internal_controlrotation_y() const {
  return controlrotation_y_;
}
inline float ObjMoveReq::controlrotation_y() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.controlRotation_y)
  return _internal_controlrotation_y();
}
inline void ObjMoveReq::_internal_set_controlrotation_y(float value) {
  
  controlrotation_y_ = value;
}
inline void ObjMoveReq::set_controlrotation_y(float value) {
  _internal_set_controlrotation_y(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.controlRotation_y)
}

// float controlRotation_z = 18;
inline void ObjMoveReq::clear_controlrotation_z() {
  controlrotation_z_ = 0;
}
inline float ObjMoveReq::_internal_controlrotation_z() const {
  return controlrotation_z_;
}
inline float ObjMoveReq::controlrotation_z() const {
  // @@protoc_insertion_point(field_get:ObjMoveReq.controlRotation_z)
  return _internal_controlrotation_z();
}
inline void ObjMoveReq::_internal_set_controlrotation_z(float value) {
  
  controlrotation_z_ = value;
}
inline void ObjMoveReq::set_controlrotation_z(float value) {
  _internal_set_controlrotation_z(value);
  // @@protoc_insertion_point(field_set:ObjMoveReq.controlRotation_z)
}

// -------------------------------------------------------------------

// VisibleObjEnterRoleNotify

// float dir = 1;
inline void VisibleObjEnterRoleNotify::clear_dir() {
  dir_ = 0;
}
inline float VisibleObjEnterRoleNotify::_internal_dir() const {
  return dir_;
}
inline float VisibleObjEnterRoleNotify::dir() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.dir)
  return _internal_dir();
}
inline void VisibleObjEnterRoleNotify::_internal_set_dir(float value) {
  
  dir_ = value;
}
inline void VisibleObjEnterRoleNotify::set_dir(float value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.dir)
}

// uint32 move_mode_param = 2;
inline void VisibleObjEnterRoleNotify::clear_move_mode_param() {
  move_mode_param_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::_internal_move_mode_param() const {
  return move_mode_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::move_mode_param() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.move_mode_param)
  return _internal_move_mode_param();
}
inline void VisibleObjEnterRoleNotify::_internal_set_move_mode_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  move_mode_param_ = value;
}
inline void VisibleObjEnterRoleNotify::set_move_mode_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_move_mode_param(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.move_mode_param)
}

// uint32 role_status = 3;
inline void VisibleObjEnterRoleNotify::clear_role_status() {
  role_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::_internal_role_status() const {
  return role_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::role_status() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.role_status)
  return _internal_role_status();
}
inline void VisibleObjEnterRoleNotify::_internal_set_role_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  role_status_ = value;
}
inline void VisibleObjEnterRoleNotify::set_role_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_role_status(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.role_status)
}

// uint32 obj_id = 4;
inline void VisibleObjEnterRoleNotify::clear_obj_id() {
  obj_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::_internal_obj_id() const {
  return obj_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::obj_id() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.obj_id)
  return _internal_obj_id();
}
inline void VisibleObjEnterRoleNotify::_internal_set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  obj_id_ = value;
}
inline void VisibleObjEnterRoleNotify::set_obj_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_obj_id(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.obj_id)
}

// int32 role_id = 5;
inline void VisibleObjEnterRoleNotify::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisibleObjEnterRoleNotify::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisibleObjEnterRoleNotify::role_id() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.role_id)
  return _internal_role_id();
}
inline void VisibleObjEnterRoleNotify::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
}
inline void VisibleObjEnterRoleNotify::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.role_id)
}

// string role_name = 6;
inline void VisibleObjEnterRoleNotify::clear_role_name() {
  role_name_.ClearToEmpty();
}
inline const std::string& VisibleObjEnterRoleNotify::role_name() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VisibleObjEnterRoleNotify::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.role_name)
}
inline std::string* VisibleObjEnterRoleNotify::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:VisibleObjEnterRoleNotify.role_name)
  return _s;
}
inline const std::string& VisibleObjEnterRoleNotify::_internal_role_name() const {
  return role_name_.Get();
}
inline void VisibleObjEnterRoleNotify::_internal_set_role_name(const std::string& value) {
  
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VisibleObjEnterRoleNotify::_internal_mutable_role_name() {
  
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VisibleObjEnterRoleNotify::release_role_name() {
  // @@protoc_insertion_point(field_release:VisibleObjEnterRoleNotify.role_name)
  return role_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VisibleObjEnterRoleNotify::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:VisibleObjEnterRoleNotify.role_name)
}

// int32 hp = 7;
inline void VisibleObjEnterRoleNotify::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisibleObjEnterRoleNotify::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisibleObjEnterRoleNotify::hp() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.hp)
  return _internal_hp();
}
inline void VisibleObjEnterRoleNotify::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void VisibleObjEnterRoleNotify::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.hp)
}

// int32 max_hp = 8;
inline void VisibleObjEnterRoleNotify::clear_max_hp() {
  max_hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisibleObjEnterRoleNotify::_internal_max_hp() const {
  return max_hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisibleObjEnterRoleNotify::max_hp() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.max_hp)
  return _internal_max_hp();
}
inline void VisibleObjEnterRoleNotify::_internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_hp_ = value;
}
inline void VisibleObjEnterRoleNotify::set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.max_hp)
}

// uint32 level = 9;
inline void VisibleObjEnterRoleNotify::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::level() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.level)
  return _internal_level();
}
inline void VisibleObjEnterRoleNotify::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void VisibleObjEnterRoleNotify::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.level)
}

// uint32 sex = 10;
inline void VisibleObjEnterRoleNotify::clear_sex() {
  sex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::sex() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.sex)
  return _internal_sex();
}
inline void VisibleObjEnterRoleNotify::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sex_ = value;
}
inline void VisibleObjEnterRoleNotify::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.sex)
}

// uint32 speed = 11;
inline void VisibleObjEnterRoleNotify::clear_speed() {
  speed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::speed() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.speed)
  return _internal_speed();
}
inline void VisibleObjEnterRoleNotify::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  speed_ = value;
}
inline void VisibleObjEnterRoleNotify::set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.speed)
}

// float pos_x = 12;
inline void VisibleObjEnterRoleNotify::clear_pos_x() {
  pos_x_ = 0;
}
inline float VisibleObjEnterRoleNotify::_internal_pos_x() const {
  return pos_x_;
}
inline float VisibleObjEnterRoleNotify::pos_x() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.pos_x)
  return _internal_pos_x();
}
inline void VisibleObjEnterRoleNotify::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void VisibleObjEnterRoleNotify::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.pos_x)
}

// float pos_y = 13;
inline void VisibleObjEnterRoleNotify::clear_pos_y() {
  pos_y_ = 0;
}
inline float VisibleObjEnterRoleNotify::_internal_pos_y() const {
  return pos_y_;
}
inline float VisibleObjEnterRoleNotify::pos_y() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.pos_y)
  return _internal_pos_y();
}
inline void VisibleObjEnterRoleNotify::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void VisibleObjEnterRoleNotify::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.pos_y)
}

// float distance = 14;
inline void VisibleObjEnterRoleNotify::clear_distance() {
  distance_ = 0;
}
inline float VisibleObjEnterRoleNotify::_internal_distance() const {
  return distance_;
}
inline float VisibleObjEnterRoleNotify::distance() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.distance)
  return _internal_distance();
}
inline void VisibleObjEnterRoleNotify::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void VisibleObjEnterRoleNotify::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.distance)
}

// uint32 name_color = 15;
inline void VisibleObjEnterRoleNotify::clear_name_color() {
  name_color_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::_internal_name_color() const {
  return name_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::name_color() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.name_color)
  return _internal_name_color();
}
inline void VisibleObjEnterRoleNotify::_internal_set_name_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  name_color_ = value;
}
inline void VisibleObjEnterRoleNotify::set_name_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_name_color(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.name_color)
}

// uint32 move_mode = 16;
inline void VisibleObjEnterRoleNotify::clear_move_mode() {
  move_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::_internal_move_mode() const {
  return move_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::move_mode() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.move_mode)
  return _internal_move_mode();
}
inline void VisibleObjEnterRoleNotify::_internal_set_move_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  move_mode_ = value;
}
inline void VisibleObjEnterRoleNotify::set_move_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_move_mode(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.move_mode)
}

// uint32 avatar = 17;
inline void VisibleObjEnterRoleNotify::clear_avatar() {
  avatar_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::_internal_avatar() const {
  return avatar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VisibleObjEnterRoleNotify::avatar() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.avatar)
  return _internal_avatar();
}
inline void VisibleObjEnterRoleNotify::_internal_set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  avatar_ = value;
}
inline void VisibleObjEnterRoleNotify::set_avatar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.avatar)
}

// float pos_z = 18;
inline void VisibleObjEnterRoleNotify::clear_pos_z() {
  pos_z_ = 0;
}
inline float VisibleObjEnterRoleNotify::_internal_pos_z() const {
  return pos_z_;
}
inline float VisibleObjEnterRoleNotify::pos_z() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.pos_z)
  return _internal_pos_z();
}
inline void VisibleObjEnterRoleNotify::_internal_set_pos_z(float value) {
  
  pos_z_ = value;
}
inline void VisibleObjEnterRoleNotify::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.pos_z)
}

// float rotation_x = 19;
inline void VisibleObjEnterRoleNotify::clear_rotation_x() {
  rotation_x_ = 0;
}
inline float VisibleObjEnterRoleNotify::_internal_rotation_x() const {
  return rotation_x_;
}
inline float VisibleObjEnterRoleNotify::rotation_x() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.rotation_x)
  return _internal_rotation_x();
}
inline void VisibleObjEnterRoleNotify::_internal_set_rotation_x(float value) {
  
  rotation_x_ = value;
}
inline void VisibleObjEnterRoleNotify::set_rotation_x(float value) {
  _internal_set_rotation_x(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.rotation_x)
}

// float rotation_y = 20;
inline void VisibleObjEnterRoleNotify::clear_rotation_y() {
  rotation_y_ = 0;
}
inline float VisibleObjEnterRoleNotify::_internal_rotation_y() const {
  return rotation_y_;
}
inline float VisibleObjEnterRoleNotify::rotation_y() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.rotation_y)
  return _internal_rotation_y();
}
inline void VisibleObjEnterRoleNotify::_internal_set_rotation_y(float value) {
  
  rotation_y_ = value;
}
inline void VisibleObjEnterRoleNotify::set_rotation_y(float value) {
  _internal_set_rotation_y(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.rotation_y)
}

// float rotation_z = 21;
inline void VisibleObjEnterRoleNotify::clear_rotation_z() {
  rotation_z_ = 0;
}
inline float VisibleObjEnterRoleNotify::_internal_rotation_z() const {
  return rotation_z_;
}
inline float VisibleObjEnterRoleNotify::rotation_z() const {
  // @@protoc_insertion_point(field_get:VisibleObjEnterRoleNotify.rotation_z)
  return _internal_rotation_z();
}
inline void VisibleObjEnterRoleNotify::_internal_set_rotation_z(float value) {
  
  rotation_z_ = value;
}
inline void VisibleObjEnterRoleNotify::set_rotation_z(float value) {
  _internal_set_rotation_z(value);
  // @@protoc_insertion_point(field_set:VisibleObjEnterRoleNotify.rotation_z)
}

// -------------------------------------------------------------------

// RoleItem

// int32 role_id = 1;
inline void RoleItem::clear_role_id() {
  role_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleItem::_internal_role_id() const {
  return role_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleItem::role_id() const {
  // @@protoc_insertion_point(field_get:RoleItem.role_id)
  return _internal_role_id();
}
inline void RoleItem::_internal_set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_id_ = value;
}
inline void RoleItem::set_role_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:RoleItem.role_id)
}

// string role_name = 2;
inline void RoleItem::clear_role_name() {
  role_name_.ClearToEmpty();
}
inline const std::string& RoleItem::role_name() const {
  // @@protoc_insertion_point(field_get:RoleItem.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleItem::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleItem.role_name)
}
inline std::string* RoleItem::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:RoleItem.role_name)
  return _s;
}
inline const std::string& RoleItem::_internal_role_name() const {
  return role_name_.Get();
}
inline void RoleItem::_internal_set_role_name(const std::string& value) {
  
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleItem::_internal_mutable_role_name() {
  
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleItem::release_role_name() {
  // @@protoc_insertion_point(field_release:RoleItem.role_name)
  return role_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleItem::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleItem.role_name)
}

// int32 avatar = 3;
inline void RoleItem::clear_avatar() {
  avatar_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleItem::_internal_avatar() const {
  return avatar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleItem::avatar() const {
  // @@protoc_insertion_point(field_get:RoleItem.avatar)
  return _internal_avatar();
}
inline void RoleItem::_internal_set_avatar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  avatar_ = value;
}
inline void RoleItem::set_avatar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:RoleItem.avatar)
}

// int32 sex = 4;
inline void RoleItem::clear_sex() {
  sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleItem::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleItem::sex() const {
  // @@protoc_insertion_point(field_get:RoleItem.sex)
  return _internal_sex();
}
inline void RoleItem::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sex_ = value;
}
inline void RoleItem::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:RoleItem.sex)
}

// uint32 create_time = 5;
inline void RoleItem::clear_create_time() {
  create_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleItem::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleItem::create_time() const {
  // @@protoc_insertion_point(field_get:RoleItem.create_time)
  return _internal_create_time();
}
inline void RoleItem::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  create_time_ = value;
}
inline void RoleItem::set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:RoleItem.create_time)
}

// uint32 last_login_time = 6;
inline void RoleItem::clear_last_login_time() {
  last_login_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleItem::_internal_last_login_time() const {
  return last_login_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoleItem::last_login_time() const {
  // @@protoc_insertion_point(field_get:RoleItem.last_login_time)
  return _internal_last_login_time();
}
inline void RoleItem::_internal_set_last_login_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_login_time_ = value;
}
inline void RoleItem::set_last_login_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_login_time(value);
  // @@protoc_insertion_point(field_set:RoleItem.last_login_time)
}

// -------------------------------------------------------------------

// LoginMsgReq

// string name = 1;
inline void LoginMsgReq::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LoginMsgReq::name() const {
  // @@protoc_insertion_point(field_get:LoginMsgReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginMsgReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginMsgReq.name)
}
inline std::string* LoginMsgReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:LoginMsgReq.name)
  return _s;
}
inline const std::string& LoginMsgReq::_internal_name() const {
  return name_.Get();
}
inline void LoginMsgReq::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginMsgReq::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginMsgReq::release_name() {
  // @@protoc_insertion_point(field_release:LoginMsgReq.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginMsgReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:LoginMsgReq.name)
}

// string token = 2;
inline void LoginMsgReq::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& LoginMsgReq::token() const {
  // @@protoc_insertion_point(field_get:LoginMsgReq.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginMsgReq::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginMsgReq.token)
}
inline std::string* LoginMsgReq::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:LoginMsgReq.token)
  return _s;
}
inline const std::string& LoginMsgReq::_internal_token() const {
  return token_.Get();
}
inline void LoginMsgReq::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginMsgReq::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginMsgReq::release_token() {
  // @@protoc_insertion_point(field_release:LoginMsgReq.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginMsgReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:LoginMsgReq.token)
}

// string uuid = 3;
inline void LoginMsgReq::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& LoginMsgReq::uuid() const {
  // @@protoc_insertion_point(field_get:LoginMsgReq.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginMsgReq::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginMsgReq.uuid)
}
inline std::string* LoginMsgReq::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:LoginMsgReq.uuid)
  return _s;
}
inline const std::string& LoginMsgReq::_internal_uuid() const {
  return uuid_.Get();
}
inline void LoginMsgReq::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginMsgReq::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginMsgReq::release_uuid() {
  // @@protoc_insertion_point(field_release:LoginMsgReq.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginMsgReq::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:LoginMsgReq.uuid)
}

// string wallet = 4;
inline void LoginMsgReq::clear_wallet() {
  wallet_.ClearToEmpty();
}
inline const std::string& LoginMsgReq::wallet() const {
  // @@protoc_insertion_point(field_get:LoginMsgReq.wallet)
  return _internal_wallet();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginMsgReq::set_wallet(ArgT0&& arg0, ArgT... args) {
 
 wallet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginMsgReq.wallet)
}
inline std::string* LoginMsgReq::mutable_wallet() {
  std::string* _s = _internal_mutable_wallet();
  // @@protoc_insertion_point(field_mutable:LoginMsgReq.wallet)
  return _s;
}
inline const std::string& LoginMsgReq::_internal_wallet() const {
  return wallet_.Get();
}
inline void LoginMsgReq::_internal_set_wallet(const std::string& value) {
  
  wallet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginMsgReq::_internal_mutable_wallet() {
  
  return wallet_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginMsgReq::release_wallet() {
  // @@protoc_insertion_point(field_release:LoginMsgReq.wallet)
  return wallet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginMsgReq::set_allocated_wallet(std::string* wallet) {
  if (wallet != nullptr) {
    
  } else {
    
  }
  wallet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wallet,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:LoginMsgReq.wallet)
}

// int32 invitationstatus = 5;
inline void LoginMsgReq::clear_invitationstatus() {
  invitationstatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginMsgReq::_internal_invitationstatus() const {
  return invitationstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginMsgReq::invitationstatus() const {
  // @@protoc_insertion_point(field_get:LoginMsgReq.invitationstatus)
  return _internal_invitationstatus();
}
inline void LoginMsgReq::_internal_set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invitationstatus_ = value;
}
inline void LoginMsgReq::set_invitationstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invitationstatus(value);
  // @@protoc_insertion_point(field_set:LoginMsgReq.invitationstatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CreateRoleAck_RET_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CreateRoleAck_RET_TYPE>() {
  return ::CreateRoleAck_RET_TYPE_descriptor();
}
template <> struct is_proto_enum< ::RoleListNotify_LoginAckCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RoleListNotify_LoginAckCode>() {
  return ::RoleListNotify_LoginAckCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_2eproto
