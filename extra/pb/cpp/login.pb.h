// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_2eproto;
class CreateAccountAck;
struct CreateAccountAckDefaultTypeInternal;
extern CreateAccountAckDefaultTypeInternal _CreateAccountAck_default_instance_;
class CreateAccountReq;
struct CreateAccountReqDefaultTypeInternal;
extern CreateAccountReqDefaultTypeInternal _CreateAccountReq_default_instance_;
class CreateRoleAck;
struct CreateRoleAckDefaultTypeInternal;
extern CreateRoleAckDefaultTypeInternal _CreateRoleAck_default_instance_;
class CreateRoleReq;
struct CreateRoleReqDefaultTypeInternal;
extern CreateRoleReqDefaultTypeInternal _CreateRoleReq_default_instance_;
class DeleteRoleAck;
struct DeleteRoleAckDefaultTypeInternal;
extern DeleteRoleAckDefaultTypeInternal _DeleteRoleAck_default_instance_;
class DeleteRoleReq;
struct DeleteRoleReqDefaultTypeInternal;
extern DeleteRoleReqDefaultTypeInternal _DeleteRoleReq_default_instance_;
class LoginAppAck;
struct LoginAppAckDefaultTypeInternal;
extern LoginAppAckDefaultTypeInternal _LoginAppAck_default_instance_;
class LoginAppReq;
struct LoginAppReqDefaultTypeInternal;
extern LoginAppReqDefaultTypeInternal _LoginAppReq_default_instance_;
class RoleInfo;
struct RoleInfoDefaultTypeInternal;
extern RoleInfoDefaultTypeInternal _RoleInfo_default_instance_;
class SelectRoleAck;
struct SelectRoleAckDefaultTypeInternal;
extern SelectRoleAckDefaultTypeInternal _SelectRoleAck_default_instance_;
class SelectRoleReq;
struct SelectRoleReqDefaultTypeInternal;
extern SelectRoleReqDefaultTypeInternal _SelectRoleReq_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CreateAccountAck* Arena::CreateMaybeMessage<::CreateAccountAck>(Arena*);
template<> ::CreateAccountReq* Arena::CreateMaybeMessage<::CreateAccountReq>(Arena*);
template<> ::CreateRoleAck* Arena::CreateMaybeMessage<::CreateRoleAck>(Arena*);
template<> ::CreateRoleReq* Arena::CreateMaybeMessage<::CreateRoleReq>(Arena*);
template<> ::DeleteRoleAck* Arena::CreateMaybeMessage<::DeleteRoleAck>(Arena*);
template<> ::DeleteRoleReq* Arena::CreateMaybeMessage<::DeleteRoleReq>(Arena*);
template<> ::LoginAppAck* Arena::CreateMaybeMessage<::LoginAppAck>(Arena*);
template<> ::LoginAppReq* Arena::CreateMaybeMessage<::LoginAppReq>(Arena*);
template<> ::RoleInfo* Arena::CreateMaybeMessage<::RoleInfo>(Arena*);
template<> ::SelectRoleAck* Arena::CreateMaybeMessage<::SelectRoleAck>(Arena*);
template<> ::SelectRoleReq* Arena::CreateMaybeMessage<::SelectRoleReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum LoginMsgId : int {
  Login_MSG_ID = 0,
  LOGIN_CREATEACCOUNT_REQ = 1101,
  LOGIN_SELECTROLE_REQ = 1107,
  LOGIN_SELECTROLE_ACK = 1108,
  LOGIN_DELETEROLE_REQ = 1109,
  LOGIN_DELETEROLE_ACK = 1110,
  LOGIN_LOGINAPP_ACK = 1104,
  LOGIN_CREATEACCOUNT_ACK = 1102,
  LOGIN_LOGINAPP_REQ = 1103,
  LOGIN_CREATEROLE_REQ = 1105,
  LOGIN_CREATEROLE_ACK = 1106,
  LoginMsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginMsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginMsgId_IsValid(int value);
constexpr LoginMsgId LoginMsgId_MIN = Login_MSG_ID;
constexpr LoginMsgId LoginMsgId_MAX = LOGIN_DELETEROLE_ACK;
constexpr int LoginMsgId_ARRAYSIZE = LoginMsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginMsgId_descriptor();
template<typename T>
inline const std::string& LoginMsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginMsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginMsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginMsgId_descriptor(), enum_t_value);
}
inline bool LoginMsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginMsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginMsgId>(
    LoginMsgId_descriptor(), name, value);
}
// ===================================================================

class CreateAccountReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateAccountReq) */ {
 public:
  inline CreateAccountReq() : CreateAccountReq(nullptr) {}
  ~CreateAccountReq() override;
  explicit constexpr CreateAccountReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountReq(const CreateAccountReq& from);
  CreateAccountReq(CreateAccountReq&& from) noexcept
    : CreateAccountReq() {
    *this = ::std::move(from);
  }

  inline CreateAccountReq& operator=(const CreateAccountReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountReq& operator=(CreateAccountReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountReq* internal_default_instance() {
    return reinterpret_cast<const CreateAccountReq*>(
               &_CreateAccountReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAccountReq& a, CreateAccountReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountReq* New() const final {
    return new CreateAccountReq();
  }

  CreateAccountReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateAccountReq";
  }
  protected:
  explicit CreateAccountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string Account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string Password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:CreateAccountReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class SelectRoleReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SelectRoleReq) */ {
 public:
  inline SelectRoleReq() : SelectRoleReq(nullptr) {}
  ~SelectRoleReq() override;
  explicit constexpr SelectRoleReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectRoleReq(const SelectRoleReq& from);
  SelectRoleReq(SelectRoleReq&& from) noexcept
    : SelectRoleReq() {
    *this = ::std::move(from);
  }

  inline SelectRoleReq& operator=(const SelectRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectRoleReq& operator=(SelectRoleReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectRoleReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectRoleReq* internal_default_instance() {
    return reinterpret_cast<const SelectRoleReq*>(
               &_SelectRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SelectRoleReq& a, SelectRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectRoleReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectRoleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectRoleReq* New() const final {
    return new SelectRoleReq();
  }

  SelectRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectRoleReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectRoleReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectRoleReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SelectRoleReq";
  }
  protected:
  explicit SelectRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 UserId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:SelectRoleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class SelectRoleAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SelectRoleAck) */ {
 public:
  inline SelectRoleAck() : SelectRoleAck(nullptr) {}
  ~SelectRoleAck() override;
  explicit constexpr SelectRoleAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectRoleAck(const SelectRoleAck& from);
  SelectRoleAck(SelectRoleAck&& from) noexcept
    : SelectRoleAck() {
    *this = ::std::move(from);
  }

  inline SelectRoleAck& operator=(const SelectRoleAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectRoleAck& operator=(SelectRoleAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SelectRoleAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectRoleAck* internal_default_instance() {
    return reinterpret_cast<const SelectRoleAck*>(
               &_SelectRoleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SelectRoleAck& a, SelectRoleAck& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectRoleAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectRoleAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectRoleAck* New() const final {
    return new SelectRoleAck();
  }

  SelectRoleAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectRoleAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SelectRoleAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SelectRoleAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectRoleAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SelectRoleAck";
  }
  protected:
  explicit SelectRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // int32 ErrCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SelectRoleAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteRoleReq) */ {
 public:
  inline DeleteRoleReq() : DeleteRoleReq(nullptr) {}
  ~DeleteRoleReq() override;
  explicit constexpr DeleteRoleReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRoleReq(const DeleteRoleReq& from);
  DeleteRoleReq(DeleteRoleReq&& from) noexcept
    : DeleteRoleReq() {
    *this = ::std::move(from);
  }

  inline DeleteRoleReq& operator=(const DeleteRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleReq& operator=(DeleteRoleReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRoleReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRoleReq* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleReq*>(
               &_DeleteRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteRoleReq& a, DeleteRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleReq* New() const final {
    return new DeleteRoleReq();
  }

  DeleteRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRoleReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRoleReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteRoleReq";
  }
  protected:
  explicit DeleteRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int64 UserId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DeleteRoleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class DeleteRoleAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteRoleAck) */ {
 public:
  inline DeleteRoleAck() : DeleteRoleAck(nullptr) {}
  ~DeleteRoleAck() override;
  explicit constexpr DeleteRoleAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRoleAck(const DeleteRoleAck& from);
  DeleteRoleAck(DeleteRoleAck&& from) noexcept
    : DeleteRoleAck() {
    *this = ::std::move(from);
  }

  inline DeleteRoleAck& operator=(const DeleteRoleAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRoleAck& operator=(DeleteRoleAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRoleAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRoleAck* internal_default_instance() {
    return reinterpret_cast<const DeleteRoleAck*>(
               &_DeleteRoleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteRoleAck& a, DeleteRoleAck& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRoleAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRoleAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRoleAck* New() const final {
    return new DeleteRoleAck();
  }

  DeleteRoleAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRoleAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRoleAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRoleAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRoleAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteRoleAck";
  }
  protected:
  explicit DeleteRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // int32 ErrCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DeleteRoleAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LoginAppAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginAppAck) */ {
 public:
  inline LoginAppAck() : LoginAppAck(nullptr) {}
  ~LoginAppAck() override;
  explicit constexpr LoginAppAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginAppAck(const LoginAppAck& from);
  LoginAppAck(LoginAppAck&& from) noexcept
    : LoginAppAck() {
    *this = ::std::move(from);
  }

  inline LoginAppAck& operator=(const LoginAppAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAppAck& operator=(LoginAppAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginAppAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginAppAck* internal_default_instance() {
    return reinterpret_cast<const LoginAppAck*>(
               &_LoginAppAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginAppAck& a, LoginAppAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAppAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAppAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginAppAck* New() const final {
    return new LoginAppAck();
  }

  LoginAppAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAppAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginAppAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginAppAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAppAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginAppAck";
  }
  protected:
  explicit LoginAppAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleListFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // repeated .RoleInfo RoleList = 2;
  int rolelist_size() const;
  private:
  int _internal_rolelist_size() const;
  public:
  void clear_rolelist();
  ::RoleInfo* mutable_rolelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleInfo >*
      mutable_rolelist();
  private:
  const ::RoleInfo& _internal_rolelist(int index) const;
  ::RoleInfo* _internal_add_rolelist();
  public:
  const ::RoleInfo& rolelist(int index) const;
  ::RoleInfo* add_rolelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleInfo >&
      rolelist() const;

  // int32 ErrCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginAppAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleInfo > rolelist_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateAccountAck) */ {
 public:
  inline CreateAccountAck() : CreateAccountAck(nullptr) {}
  ~CreateAccountAck() override;
  explicit constexpr CreateAccountAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountAck(const CreateAccountAck& from);
  CreateAccountAck(CreateAccountAck&& from) noexcept
    : CreateAccountAck() {
    *this = ::std::move(from);
  }

  inline CreateAccountAck& operator=(const CreateAccountAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountAck& operator=(CreateAccountAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateAccountAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountAck* internal_default_instance() {
    return reinterpret_cast<const CreateAccountAck*>(
               &_CreateAccountAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateAccountAck& a, CreateAccountAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountAck* New() const final {
    return new CreateAccountAck();
  }

  CreateAccountAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateAccountAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateAccountAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateAccountAck";
  }
  protected:
  explicit CreateAccountAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // string Token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 AccountId = 2;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateAccountAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int64 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LoginAppReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LoginAppReq) */ {
 public:
  inline LoginAppReq() : LoginAppReq(nullptr) {}
  ~LoginAppReq() override;
  explicit constexpr LoginAppReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginAppReq(const LoginAppReq& from);
  LoginAppReq(LoginAppReq&& from) noexcept
    : LoginAppReq() {
    *this = ::std::move(from);
  }

  inline LoginAppReq& operator=(const LoginAppReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAppReq& operator=(LoginAppReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginAppReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginAppReq* internal_default_instance() {
    return reinterpret_cast<const LoginAppReq*>(
               &_LoginAppReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LoginAppReq& a, LoginAppReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAppReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAppReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginAppReq* New() const final {
    return new LoginAppReq();
  }

  LoginAppReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAppReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginAppReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginAppReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAppReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LoginAppReq";
  }
  protected:
  explicit LoginAppReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // string Token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 AccountId = 2;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:LoginAppReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int64 accountid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateRoleReq) */ {
 public:
  inline CreateRoleReq() : CreateRoleReq(nullptr) {}
  ~CreateRoleReq() override;
  explicit constexpr CreateRoleReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoleReq(const CreateRoleReq& from);
  CreateRoleReq(CreateRoleReq&& from) noexcept
    : CreateRoleReq() {
    *this = ::std::move(from);
  }

  inline CreateRoleReq& operator=(const CreateRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleReq& operator=(CreateRoleReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoleReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoleReq* internal_default_instance() {
    return reinterpret_cast<const CreateRoleReq*>(
               &_CreateRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateRoleReq& a, CreateRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleReq* New() const final {
    return new CreateRoleReq();
  }

  CreateRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoleReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoleReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateRoleReq";
  }
  protected:
  explicit CreateRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 3,
    kAccountIdFieldNumber = 1,
    kRoleConfIdFieldNumber = 2,
  };
  // string RoleName = 3;
  void clear_rolename();
  const std::string& rolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rolename();
  PROTOBUF_MUST_USE_RESULT std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // int64 AccountId = 1;
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 RoleConfId = 2;
  void clear_roleconfid();
  ::PROTOBUF_NAMESPACE_ID::int32 roleconfid() const;
  void set_roleconfid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roleconfid() const;
  void _internal_set_roleconfid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateRoleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
  ::PROTOBUF_NAMESPACE_ID::int64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roleconfid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreateRoleAck) */ {
 public:
  inline CreateRoleAck() : CreateRoleAck(nullptr) {}
  ~CreateRoleAck() override;
  explicit constexpr CreateRoleAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoleAck(const CreateRoleAck& from);
  CreateRoleAck(CreateRoleAck&& from) noexcept
    : CreateRoleAck() {
    *this = ::std::move(from);
  }

  inline CreateRoleAck& operator=(const CreateRoleAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleAck& operator=(CreateRoleAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoleAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoleAck* internal_default_instance() {
    return reinterpret_cast<const CreateRoleAck*>(
               &_CreateRoleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateRoleAck& a, CreateRoleAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleAck* New() const final {
    return new CreateRoleAck();
  }

  CreateRoleAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoleAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoleAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreateRoleAck";
  }
  protected:
  explicit CreateRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kErrCodeFieldNumber = 1,
  };
  // int64 UserId = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 ErrCode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CreateRoleAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class RoleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoleInfo) */ {
 public:
  inline RoleInfo() : RoleInfo(nullptr) {}
  ~RoleInfo() override;
  explicit constexpr RoleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleInfo(const RoleInfo& from);
  RoleInfo(RoleInfo&& from) noexcept
    : RoleInfo() {
    *this = ::std::move(from);
  }

  inline RoleInfo& operator=(const RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleInfo& operator=(RoleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleInfo* internal_default_instance() {
    return reinterpret_cast<const RoleInfo*>(
               &_RoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RoleInfo& a, RoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleInfo* New() const final {
    return new RoleInfo();
  }

  RoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoleInfo";
  }
  protected:
  explicit RoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kRoleImageIdFieldNumber = 2,
    kRoleLevelFieldNumber = 4,
  };
  // string RoleName = 3;
  void clear_rolename();
  const std::string& rolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rolename();
  PROTOBUF_MUST_USE_RESULT std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // int64 UserId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 RoleImageId = 2;
  void clear_roleimageid();
  ::PROTOBUF_NAMESPACE_ID::int32 roleimageid() const;
  void set_roleimageid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roleimageid() const;
  void _internal_set_roleimageid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 RoleLevel = 4;
  void clear_rolelevel();
  ::PROTOBUF_NAMESPACE_ID::int32 rolelevel() const;
  void set_rolelevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rolelevel() const;
  void _internal_set_rolelevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 roleimageid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rolelevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountReq

// string Account = 1;
inline void CreateAccountReq::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& CreateAccountReq::account() const {
  // @@protoc_insertion_point(field_get:CreateAccountReq.Account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountReq::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateAccountReq.Account)
}
inline std::string* CreateAccountReq::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:CreateAccountReq.Account)
  return _s;
}
inline const std::string& CreateAccountReq::_internal_account() const {
  return account_.Get();
}
inline void CreateAccountReq::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountReq::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountReq::release_account() {
  // @@protoc_insertion_point(field_release:CreateAccountReq.Account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountReq::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateAccountReq.Account)
}

// string Password = 2;
inline void CreateAccountReq::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& CreateAccountReq::password() const {
  // @@protoc_insertion_point(field_get:CreateAccountReq.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateAccountReq.Password)
}
inline std::string* CreateAccountReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:CreateAccountReq.Password)
  return _s;
}
inline const std::string& CreateAccountReq::_internal_password() const {
  return password_.Get();
}
inline void CreateAccountReq::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountReq::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountReq::release_password() {
  // @@protoc_insertion_point(field_release:CreateAccountReq.Password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateAccountReq.Password)
}

// -------------------------------------------------------------------

// SelectRoleReq

// int64 UserId = 1;
inline void SelectRoleReq::clear_userid() {
  userid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SelectRoleReq::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SelectRoleReq::userid() const {
  // @@protoc_insertion_point(field_get:SelectRoleReq.UserId)
  return _internal_userid();
}
inline void SelectRoleReq::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void SelectRoleReq::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:SelectRoleReq.UserId)
}

// -------------------------------------------------------------------

// SelectRoleAck

// int32 ErrCode = 1;
inline void SelectRoleAck::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectRoleAck::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectRoleAck::errcode() const {
  // @@protoc_insertion_point(field_get:SelectRoleAck.ErrCode)
  return _internal_errcode();
}
inline void SelectRoleAck::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void SelectRoleAck::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:SelectRoleAck.ErrCode)
}

// -------------------------------------------------------------------

// DeleteRoleReq

// int64 UserId = 1;
inline void DeleteRoleReq::clear_userid() {
  userid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRoleReq::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteRoleReq::userid() const {
  // @@protoc_insertion_point(field_get:DeleteRoleReq.UserId)
  return _internal_userid();
}
inline void DeleteRoleReq::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void DeleteRoleReq::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:DeleteRoleReq.UserId)
}

// -------------------------------------------------------------------

// DeleteRoleAck

// int32 ErrCode = 1;
inline void DeleteRoleAck::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteRoleAck::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteRoleAck::errcode() const {
  // @@protoc_insertion_point(field_get:DeleteRoleAck.ErrCode)
  return _internal_errcode();
}
inline void DeleteRoleAck::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void DeleteRoleAck::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:DeleteRoleAck.ErrCode)
}

// -------------------------------------------------------------------

// LoginAppAck

// int32 ErrCode = 1;
inline void LoginAppAck::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginAppAck::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginAppAck::errcode() const {
  // @@protoc_insertion_point(field_get:LoginAppAck.ErrCode)
  return _internal_errcode();
}
inline void LoginAppAck::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void LoginAppAck::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:LoginAppAck.ErrCode)
}

// repeated .RoleInfo RoleList = 2;
inline int LoginAppAck::_internal_rolelist_size() const {
  return rolelist_.size();
}
inline int LoginAppAck::rolelist_size() const {
  return _internal_rolelist_size();
}
inline void LoginAppAck::clear_rolelist() {
  rolelist_.Clear();
}
inline ::RoleInfo* LoginAppAck::mutable_rolelist(int index) {
  // @@protoc_insertion_point(field_mutable:LoginAppAck.RoleList)
  return rolelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleInfo >*
LoginAppAck::mutable_rolelist() {
  // @@protoc_insertion_point(field_mutable_list:LoginAppAck.RoleList)
  return &rolelist_;
}
inline const ::RoleInfo& LoginAppAck::_internal_rolelist(int index) const {
  return rolelist_.Get(index);
}
inline const ::RoleInfo& LoginAppAck::rolelist(int index) const {
  // @@protoc_insertion_point(field_get:LoginAppAck.RoleList)
  return _internal_rolelist(index);
}
inline ::RoleInfo* LoginAppAck::_internal_add_rolelist() {
  return rolelist_.Add();
}
inline ::RoleInfo* LoginAppAck::add_rolelist() {
  ::RoleInfo* _add = _internal_add_rolelist();
  // @@protoc_insertion_point(field_add:LoginAppAck.RoleList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoleInfo >&
LoginAppAck::rolelist() const {
  // @@protoc_insertion_point(field_list:LoginAppAck.RoleList)
  return rolelist_;
}

// -------------------------------------------------------------------

// CreateAccountAck

// string Token = 1;
inline void CreateAccountAck::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CreateAccountAck::token() const {
  // @@protoc_insertion_point(field_get:CreateAccountAck.Token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateAccountAck::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateAccountAck.Token)
}
inline std::string* CreateAccountAck::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:CreateAccountAck.Token)
  return _s;
}
inline const std::string& CreateAccountAck::_internal_token() const {
  return token_.Get();
}
inline void CreateAccountAck::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateAccountAck::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateAccountAck::release_token() {
  // @@protoc_insertion_point(field_release:CreateAccountAck.Token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateAccountAck::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateAccountAck.Token)
}

// int64 AccountId = 2;
inline void CreateAccountAck::clear_accountid() {
  accountid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountAck::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateAccountAck::accountid() const {
  // @@protoc_insertion_point(field_get:CreateAccountAck.AccountId)
  return _internal_accountid();
}
inline void CreateAccountAck::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  accountid_ = value;
}
inline void CreateAccountAck::set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CreateAccountAck.AccountId)
}

// -------------------------------------------------------------------

// LoginAppReq

// string Token = 1;
inline void LoginAppReq::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& LoginAppReq::token() const {
  // @@protoc_insertion_point(field_get:LoginAppReq.Token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginAppReq::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LoginAppReq.Token)
}
inline std::string* LoginAppReq::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:LoginAppReq.Token)
  return _s;
}
inline const std::string& LoginAppReq::_internal_token() const {
  return token_.Get();
}
inline void LoginAppReq::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginAppReq::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginAppReq::release_token() {
  // @@protoc_insertion_point(field_release:LoginAppReq.Token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginAppReq::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:LoginAppReq.Token)
}

// int64 AccountId = 2;
inline void LoginAppReq::clear_accountid() {
  accountid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginAppReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginAppReq::accountid() const {
  // @@protoc_insertion_point(field_get:LoginAppReq.AccountId)
  return _internal_accountid();
}
inline void LoginAppReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  accountid_ = value;
}
inline void LoginAppReq::set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:LoginAppReq.AccountId)
}

// -------------------------------------------------------------------

// CreateRoleReq

// int64 AccountId = 1;
inline void CreateRoleReq::clear_accountid() {
  accountid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRoleReq::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRoleReq::accountid() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.AccountId)
  return _internal_accountid();
}
inline void CreateRoleReq::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  accountid_ = value;
}
inline void CreateRoleReq::set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:CreateRoleReq.AccountId)
}

// int32 RoleConfId = 2;
inline void CreateRoleReq::clear_roleconfid() {
  roleconfid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleReq::_internal_roleconfid() const {
  return roleconfid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleReq::roleconfid() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.RoleConfId)
  return _internal_roleconfid();
}
inline void CreateRoleReq::_internal_set_roleconfid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roleconfid_ = value;
}
inline void CreateRoleReq::set_roleconfid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roleconfid(value);
  // @@protoc_insertion_point(field_set:CreateRoleReq.RoleConfId)
}

// string RoleName = 3;
inline void CreateRoleReq::clear_rolename() {
  rolename_.ClearToEmpty();
}
inline const std::string& CreateRoleReq::rolename() const {
  // @@protoc_insertion_point(field_get:CreateRoleReq.RoleName)
  return _internal_rolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoleReq::set_rolename(ArgT0&& arg0, ArgT... args) {
 
 rolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreateRoleReq.RoleName)
}
inline std::string* CreateRoleReq::mutable_rolename() {
  std::string* _s = _internal_mutable_rolename();
  // @@protoc_insertion_point(field_mutable:CreateRoleReq.RoleName)
  return _s;
}
inline const std::string& CreateRoleReq::_internal_rolename() const {
  return rolename_.Get();
}
inline void CreateRoleReq::_internal_set_rolename(const std::string& value) {
  
  rolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::_internal_mutable_rolename() {
  
  return rolename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoleReq::release_rolename() {
  // @@protoc_insertion_point(field_release:CreateRoleReq.RoleName)
  return rolename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoleReq::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    
  } else {
    
  }
  rolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rolename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:CreateRoleReq.RoleName)
}

// -------------------------------------------------------------------

// CreateRoleAck

// int32 ErrCode = 1;
inline void CreateRoleAck::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleAck::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleAck::errcode() const {
  // @@protoc_insertion_point(field_get:CreateRoleAck.ErrCode)
  return _internal_errcode();
}
inline void CreateRoleAck::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void CreateRoleAck::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:CreateRoleAck.ErrCode)
}

// int64 UserId = 2;
inline void CreateRoleAck::clear_userid() {
  userid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRoleAck::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateRoleAck::userid() const {
  // @@protoc_insertion_point(field_get:CreateRoleAck.UserId)
  return _internal_userid();
}
inline void CreateRoleAck::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void CreateRoleAck::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:CreateRoleAck.UserId)
}

// -------------------------------------------------------------------

// RoleInfo

// int64 UserId = 1;
inline void RoleInfo::clear_userid() {
  userid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleInfo::userid() const {
  // @@protoc_insertion_point(field_get:RoleInfo.UserId)
  return _internal_userid();
}
inline void RoleInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void RoleInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:RoleInfo.UserId)
}

// int32 RoleImageId = 2;
inline void RoleInfo::clear_roleimageid() {
  roleimageid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::_internal_roleimageid() const {
  return roleimageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::roleimageid() const {
  // @@protoc_insertion_point(field_get:RoleInfo.RoleImageId)
  return _internal_roleimageid();
}
inline void RoleInfo::_internal_set_roleimageid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roleimageid_ = value;
}
inline void RoleInfo::set_roleimageid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roleimageid(value);
  // @@protoc_insertion_point(field_set:RoleInfo.RoleImageId)
}

// string RoleName = 3;
inline void RoleInfo::clear_rolename() {
  rolename_.ClearToEmpty();
}
inline const std::string& RoleInfo::rolename() const {
  // @@protoc_insertion_point(field_get:RoleInfo.RoleName)
  return _internal_rolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleInfo::set_rolename(ArgT0&& arg0, ArgT... args) {
 
 rolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RoleInfo.RoleName)
}
inline std::string* RoleInfo::mutable_rolename() {
  std::string* _s = _internal_mutable_rolename();
  // @@protoc_insertion_point(field_mutable:RoleInfo.RoleName)
  return _s;
}
inline const std::string& RoleInfo::_internal_rolename() const {
  return rolename_.Get();
}
inline void RoleInfo::_internal_set_rolename(const std::string& value) {
  
  rolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleInfo::_internal_mutable_rolename() {
  
  return rolename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleInfo::release_rolename() {
  // @@protoc_insertion_point(field_release:RoleInfo.RoleName)
  return rolename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleInfo::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    
  } else {
    
  }
  rolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rolename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:RoleInfo.RoleName)
}

// int32 RoleLevel = 4;
inline void RoleInfo::clear_rolelevel() {
  rolelevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::_internal_rolelevel() const {
  return rolelevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::rolelevel() const {
  // @@protoc_insertion_point(field_get:RoleInfo.RoleLevel)
  return _internal_rolelevel();
}
inline void RoleInfo::_internal_set_rolelevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rolelevel_ = value;
}
inline void RoleInfo::set_rolelevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rolelevel(value);
  // @@protoc_insertion_point(field_set:RoleInfo.RoleLevel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LoginMsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginMsgId>() {
  return ::LoginMsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_2eproto
